
pwm_led_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004074  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08004274  08004274  00005274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a4  080044a4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ac  080044ac  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044b0  080044b0  000054b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080044b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000005c  08004510  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08004510  00006430  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcd9  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199f  00000000  00000000  00013d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00015708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  000162b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a14  00000000  00000000  00016bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6ac  00000000  00000000  00049605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e2bf  00000000  00000000  00058cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003744  00000000  00000000  00196fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0019a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800425c 	.word	0x0800425c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800425c 	.word	0x0800425c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SysTick_Handler>:

extern TIM_HandleTypeDef htim10;
extern TIM_HandleTypeDef htim11;
extern TIM_HandleTypeDef htim12;

void SysTick_Handler(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005e4:	f000 fd76 	bl	80010d4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005e8:	f000 fee6 	bl	80013b8 <HAL_SYSTICK_IRQHandler>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim10);
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80005f6:	f001 fe97 	bl	8002328 <HAL_TIM_IRQHandler>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000134 	.word	0x20000134

08000604 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim11);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800060a:	f001 fe8d 	bl	8002328 <HAL_TIM_IRQHandler>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000180 	.word	0x20000180

08000618 <TIM8_BRK_TIM12_IRQHandler>:

void TIM8_BRK_TIM12_IRQHandler(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim12);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800061e:	f001 fe83 	bl	8002328 <HAL_TIM_IRQHandler>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001cc 	.word	0x200001cc

0800062c <main>:

// Define global message array to be used for transmitting over UART6
char msg[200];


int main() {
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b090      	sub	sp, #64	@ 0x40
 8000630:	af06      	add	r7, sp, #24

	// Init Hal
	HAL_Init();
 8000632:	f000 fd12 	bl	800105a <HAL_Init>
	  memset(&htim12, 0, sizeof(htim12));
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	48af      	ldr	r0, [pc, #700]	@ (80008f8 <main+0x2cc>)
 800063c:	f003 f986 	bl	800394c <memset>
	  memset(&htim10, 0, sizeof(htim10));
 8000640:	224c      	movs	r2, #76	@ 0x4c
 8000642:	2100      	movs	r1, #0
 8000644:	48ad      	ldr	r0, [pc, #692]	@ (80008fc <main+0x2d0>)
 8000646:	f003 f981 	bl	800394c <memset>
	  memset(&htim11, 0, sizeof(htim11));
 800064a:	224c      	movs	r2, #76	@ 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	48ac      	ldr	r0, [pc, #688]	@ (8000900 <main+0x2d4>)
 8000650:	f003 f97c 	bl	800394c <memset>

	// Configure the System Clock
	SystemClock_Config();
 8000654:	f000 faaa 	bl	8000bac <SystemClock_Config>

	// Init UART6 TX to print messages to USER minicom session
	UART6_Init();
 8000658:	f000 fb7c 	bl	8000d54 <UART6_Init>

	memset(msg, 0, strlen(msg));
 800065c:	48a9      	ldr	r0, [pc, #676]	@ (8000904 <main+0x2d8>)
 800065e:	f7ff fdef 	bl	8000240 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	48a6      	ldr	r0, [pc, #664]	@ (8000904 <main+0x2d8>)
 800066a:	f003 f96f 	bl	800394c <memset>
	sprintf(msg, "\e[1;1H\e[2J");
 800066e:	49a6      	ldr	r1, [pc, #664]	@ (8000908 <main+0x2dc>)
 8000670:	48a4      	ldr	r0, [pc, #656]	@ (8000904 <main+0x2d8>)
 8000672:	f003 f94b 	bl	800390c <siprintf>
	if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000676:	48a3      	ldr	r0, [pc, #652]	@ (8000904 <main+0x2d8>)
 8000678:	f7ff fde2 	bl	8000240 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000684:	499f      	ldr	r1, [pc, #636]	@ (8000904 <main+0x2d8>)
 8000686:	48a1      	ldr	r0, [pc, #644]	@ (800090c <main+0x2e0>)
 8000688:	f002 fc37 	bl	8002efa <HAL_UART_Transmit>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <main+0x6a>
		Error_Handler();
 8000692:	f000 fbd3 	bl	8000e3c <Error_Handler>
	}
	// Initialize GPIO Button
	BTN_GPIO_Init();
 8000696:	f000 fb91 	bl	8000dbc <BTN_GPIO_Init>
	  while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_1) == GPIO_PIN_SET);
 800069a:	bf00      	nop
 800069c:	2102      	movs	r1, #2
 800069e:	489c      	ldr	r0, [pc, #624]	@ (8000910 <main+0x2e4>)
 80006a0:	f001 f844 	bl	800172c <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d0f8      	beq.n	800069c <main+0x70>
	  wait();
 80006aa:	f000 fbb1 	bl	8000e10 <wait>
	  memset(msg, 0, strlen(msg));
 80006ae:	4895      	ldr	r0, [pc, #596]	@ (8000904 <main+0x2d8>)
 80006b0:	f7ff fdc6 	bl	8000240 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	4892      	ldr	r0, [pc, #584]	@ (8000904 <main+0x2d8>)
 80006bc:	f003 f946 	bl	800394c <memset>
	  sprintf(msg, "\nUse the PWM Mode of the Timer's Output Compare Unit to independently control the\nbrightness of 4 LED's on the following channels:\n");
 80006c0:	4994      	ldr	r1, [pc, #592]	@ (8000914 <main+0x2e8>)
 80006c2:	4890      	ldr	r0, [pc, #576]	@ (8000904 <main+0x2d8>)
 80006c4:	f003 f922 	bl	800390c <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 80006c8:	488e      	ldr	r0, [pc, #568]	@ (8000904 <main+0x2d8>)
 80006ca:	f7ff fdb9 	bl	8000240 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d6:	498b      	ldr	r1, [pc, #556]	@ (8000904 <main+0x2d8>)
 80006d8:	488c      	ldr	r0, [pc, #560]	@ (800090c <main+0x2e0>)
 80006da:	f002 fc0e 	bl	8002efa <HAL_UART_Transmit>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <main+0xbc>
		Error_Handler();
 80006e4:	f000 fbaa 	bl	8000e3c <Error_Handler>
	  }
	  memset(msg, 0, strlen(msg));
 80006e8:	4886      	ldr	r0, [pc, #536]	@ (8000904 <main+0x2d8>)
 80006ea:	f7ff fda9 	bl	8000240 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	4883      	ldr	r0, [pc, #524]	@ (8000904 <main+0x2d8>)
 80006f6:	f003 f929 	bl	800394c <memset>
	  sprintf(msg, "------------------------------------------------------------------\r\n");
 80006fa:	4987      	ldr	r1, [pc, #540]	@ (8000918 <main+0x2ec>)
 80006fc:	4881      	ldr	r0, [pc, #516]	@ (8000904 <main+0x2d8>)
 80006fe:	f003 f905 	bl	800390c <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000702:	4880      	ldr	r0, [pc, #512]	@ (8000904 <main+0x2d8>)
 8000704:	f7ff fd9c 	bl	8000240 <strlen>
 8000708:	4603      	mov	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000710:	497c      	ldr	r1, [pc, #496]	@ (8000904 <main+0x2d8>)
 8000712:	487e      	ldr	r0, [pc, #504]	@ (800090c <main+0x2e0>)
 8000714:	f002 fbf1 	bl	8002efa <HAL_UART_Transmit>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <main+0xf6>
		Error_Handler();
 800071e:	f000 fb8d 	bl	8000e3c <Error_Handler>
	  }
	  memset(msg, 0, strlen(msg));
 8000722:	4878      	ldr	r0, [pc, #480]	@ (8000904 <main+0x2d8>)
 8000724:	f7ff fd8c 	bl	8000240 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	4875      	ldr	r0, [pc, #468]	@ (8000904 <main+0x2d8>)
 8000730:	f003 f90c 	bl	800394c <memset>
	  sprintf(msg, "\tTIM12_Channel2 -> Logic_Analyzer D0\n\tTIM10_Channel1 -> Logic_Analyzer D1\n\tTIM11_Channel1 -> Logic_Analyzer D2\n\tTIM12_Channel1 -> Logic_Analyzer D3\n");
 8000734:	4979      	ldr	r1, [pc, #484]	@ (800091c <main+0x2f0>)
 8000736:	4873      	ldr	r0, [pc, #460]	@ (8000904 <main+0x2d8>)
 8000738:	f003 f8e8 	bl	800390c <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 800073c:	4871      	ldr	r0, [pc, #452]	@ (8000904 <main+0x2d8>)
 800073e:	f7ff fd7f 	bl	8000240 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800074a:	496e      	ldr	r1, [pc, #440]	@ (8000904 <main+0x2d8>)
 800074c:	486f      	ldr	r0, [pc, #444]	@ (800090c <main+0x2e0>)
 800074e:	f002 fbd4 	bl	8002efa <HAL_UART_Transmit>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <main+0x130>
		Error_Handler();
 8000758:	f000 fb70 	bl	8000e3c <Error_Handler>
	  }

	  memset(msg, 0, strlen(msg));
 800075c:	4869      	ldr	r0, [pc, #420]	@ (8000904 <main+0x2d8>)
 800075e:	f7ff fd6f 	bl	8000240 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	4866      	ldr	r0, [pc, #408]	@ (8000904 <main+0x2d8>)
 800076a:	f003 f8ef 	bl	800394c <memset>
	  sprintf(msg, "==================================================================\r\n");
 800076e:	496c      	ldr	r1, [pc, #432]	@ (8000920 <main+0x2f4>)
 8000770:	4864      	ldr	r0, [pc, #400]	@ (8000904 <main+0x2d8>)
 8000772:	f003 f8cb 	bl	800390c <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000776:	4863      	ldr	r0, [pc, #396]	@ (8000904 <main+0x2d8>)
 8000778:	f7ff fd62 	bl	8000240 <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000784:	495f      	ldr	r1, [pc, #380]	@ (8000904 <main+0x2d8>)
 8000786:	4861      	ldr	r0, [pc, #388]	@ (800090c <main+0x2e0>)
 8000788:	f002 fbb7 	bl	8002efa <HAL_UART_Transmit>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <main+0x16a>
		Error_Handler();
 8000792:	f000 fb53 	bl	8000e3c <Error_Handler>
	  }
		// Notify User Timer PWM has been initialized and is just waiting to begin
		memset(msg, 0, strlen(msg));
 8000796:	485b      	ldr	r0, [pc, #364]	@ (8000904 <main+0x2d8>)
 8000798:	f7ff fd52 	bl	8000240 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	4858      	ldr	r0, [pc, #352]	@ (8000904 <main+0x2d8>)
 80007a4:	f003 f8d2 	bl	800394c <memset>
		sprintf(msg, "\nClick the PWR/START button to being PWM\n");
 80007a8:	495e      	ldr	r1, [pc, #376]	@ (8000924 <main+0x2f8>)
 80007aa:	4856      	ldr	r0, [pc, #344]	@ (8000904 <main+0x2d8>)
 80007ac:	f003 f8ae 	bl	800390c <siprintf>
		if(HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 80007b0:	4854      	ldr	r0, [pc, #336]	@ (8000904 <main+0x2d8>)
 80007b2:	f7ff fd45 	bl	8000240 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007be:	4951      	ldr	r1, [pc, #324]	@ (8000904 <main+0x2d8>)
 80007c0:	4852      	ldr	r0, [pc, #328]	@ (800090c <main+0x2e0>)
 80007c2:	f002 fb9a 	bl	8002efa <HAL_UART_Transmit>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <main+0x1a4>
			Error_Handler();
 80007cc:	f000 fb36 	bl	8000e3c <Error_Handler>
		}
	 while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_1) == GPIO_PIN_SET);
 80007d0:	bf00      	nop
 80007d2:	2102      	movs	r1, #2
 80007d4:	484e      	ldr	r0, [pc, #312]	@ (8000910 <main+0x2e4>)
 80007d6:	f000 ffa9 	bl	800172c <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d0f8      	beq.n	80007d2 <main+0x1a6>
   wait();
 80007e0:	f000 fb16 	bl	8000e10 <wait>

	  /***********************************************************************
	   ***************             Initialize PWM            ***************
	   ***********************************************************************/
		// Start Timer Peripheral Clock
		__HAL_RCC_TIM10_CLK_ENABLE();
 80007e4:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <main+0x2fc>)
 80007e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e8:	4a4f      	ldr	r2, [pc, #316]	@ (8000928 <main+0x2fc>)
 80007ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000928 <main+0x2fc>)
 80007f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_TIM11_CLK_ENABLE();
 80007fc:	4b4a      	ldr	r3, [pc, #296]	@ (8000928 <main+0x2fc>)
 80007fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000800:	4a49      	ldr	r2, [pc, #292]	@ (8000928 <main+0x2fc>)
 8000802:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000806:	6453      	str	r3, [r2, #68]	@ 0x44
 8000808:	4b47      	ldr	r3, [pc, #284]	@ (8000928 <main+0x2fc>)
 800080a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_TIM12_CLK_ENABLE();
 8000814:	4b44      	ldr	r3, [pc, #272]	@ (8000928 <main+0x2fc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	4a43      	ldr	r2, [pc, #268]	@ (8000928 <main+0x2fc>)
 800081a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800081e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000820:	4b41      	ldr	r3, [pc, #260]	@ (8000928 <main+0x2fc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
	  TIM_TypeDef *timerBaseAddr;
	  uint32_t Channel;
	  memset(&Timer_Init, 0, sizeof(Timer_Init));
 800082c:	2218      	movs	r2, #24
 800082e:	2100      	movs	r1, #0
 8000830:	483e      	ldr	r0, [pc, #248]	@ (800092c <main+0x300>)
 8000832:	f003 f88b 	bl	800394c <memset>
	  Timer_Init.Prescaler = 4;
 8000836:	4b3d      	ldr	r3, [pc, #244]	@ (800092c <main+0x300>)
 8000838:	2204      	movs	r2, #4
 800083a:	601a      	str	r2, [r3, #0]
	  //Timer_Init.Prescaler = 4999;
	  Timer_Init.Period = 10000-1;
 800083c:	4b3b      	ldr	r3, [pc, #236]	@ (800092c <main+0x300>)
 800083e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000842:	609a      	str	r2, [r3, #8]

	  /*
	   * Configure TIM Output Compare structure and clear
	   */
	  memset(&sConfig_nonConst, 0, sizeof(sConfig_nonConst));
 8000844:	221c      	movs	r2, #28
 8000846:	2100      	movs	r1, #0
 8000848:	4839      	ldr	r0, [pc, #228]	@ (8000930 <main+0x304>)
 800084a:	f003 f87f 	bl	800394c <memset>
	  sConfig_nonConst.OCMode = TIM_OCMODE_PWM1;
 800084e:	4b38      	ldr	r3, [pc, #224]	@ (8000930 <main+0x304>)
 8000850:	2260      	movs	r2, #96	@ 0x60
 8000852:	601a      	str	r2, [r3, #0]
	  sConfig_nonConst.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000854:	4b36      	ldr	r3, [pc, #216]	@ (8000930 <main+0x304>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
	  sConfig_nonConst.Pulse = 1000;
 800085a:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <main+0x304>)
 800085c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000860:	605a      	str	r2, [r3, #4]


	  for(int i = 0; i < 4; i++){
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
 8000866:	e08d      	b.n	8000984 <main+0x358>
		  if(i == 0) {
 8000868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086a:	2b00      	cmp	r3, #0
 800086c:	d114      	bne.n	8000898 <main+0x26c>
			  timerBaseAddr = TIM12;
 800086e:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <main+0x308>)
 8000870:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_2;
 8000872:	2304      	movs	r3, #4
 8000874:	613b      	str	r3, [r7, #16]
			  //sConfig_nonConst.Pulse =(Timer_Init.Prescaler*25)/100;
			  PWM_Config(timerBaseAddr, sConfig_nonConst, Channel, i);
 8000876:	4c2e      	ldr	r4, [pc, #184]	@ (8000930 <main+0x304>)
 8000878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087a:	9305      	str	r3, [sp, #20]
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	9304      	str	r3, [sp, #16]
 8000880:	466d      	mov	r5, sp
 8000882:	f104 030c 	add.w	r3, r4, #12
 8000886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000888:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800088c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000890:	6978      	ldr	r0, [r7, #20]
 8000892:	f000 f9d7 	bl	8000c44 <PWM_Config>
 8000896:	e072      	b.n	800097e <main+0x352>

		  }
		  else if( i == 1 ) {
 8000898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089a:	2b01      	cmp	r3, #1
 800089c:	d114      	bne.n	80008c8 <main+0x29c>
			  timerBaseAddr = TIM10;
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <main+0x30c>)
 80008a0:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
			  //sConfig_nonConst.Pulse = (Timer_Init.Prescaler*45)/100;
			  PWM_Config(timerBaseAddr, sConfig_nonConst, Channel, i);
 80008a6:	4c22      	ldr	r4, [pc, #136]	@ (8000930 <main+0x304>)
 80008a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008aa:	9305      	str	r3, [sp, #20]
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	9304      	str	r3, [sp, #16]
 80008b0:	466d      	mov	r5, sp
 80008b2:	f104 030c 	add.w	r3, r4, #12
 80008b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008c0:	6978      	ldr	r0, [r7, #20]
 80008c2:	f000 f9bf 	bl	8000c44 <PWM_Config>
 80008c6:	e05a      	b.n	800097e <main+0x352>
		  }
		  else if( i == 2 ) {
 80008c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d138      	bne.n	8000940 <main+0x314>
			  timerBaseAddr = TIM11;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <main+0x310>)
 80008d0:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
			  //sConfig_nonConst.Pulse = (Timer_Init.Prescaler*75)/100;
			  PWM_Config(timerBaseAddr, sConfig_nonConst, Channel, i);
 80008d6:	4c16      	ldr	r4, [pc, #88]	@ (8000930 <main+0x304>)
 80008d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008da:	9305      	str	r3, [sp, #20]
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	9304      	str	r3, [sp, #16]
 80008e0:	466d      	mov	r5, sp
 80008e2:	f104 030c 	add.w	r3, r4, #12
 80008e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008ec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008f0:	6978      	ldr	r0, [r7, #20]
 80008f2:	f000 f9a7 	bl	8000c44 <PWM_Config>
 80008f6:	e042      	b.n	800097e <main+0x352>
 80008f8:	200001cc 	.word	0x200001cc
 80008fc:	20000134 	.word	0x20000134
 8000900:	20000180 	.word	0x20000180
 8000904:	20000218 	.word	0x20000218
 8000908:	08004274 	.word	0x08004274
 800090c:	200000ac 	.word	0x200000ac
 8000910:	40022400 	.word	0x40022400
 8000914:	08004280 	.word	0x08004280
 8000918:	08004304 	.word	0x08004304
 800091c:	0800434c 	.word	0x0800434c
 8000920:	080043e4 	.word	0x080043e4
 8000924:	0800442c 	.word	0x0800442c
 8000928:	40023800 	.word	0x40023800
 800092c:	20000094 	.word	0x20000094
 8000930:	20000078 	.word	0x20000078
 8000934:	40001800 	.word	0x40001800
 8000938:	40014400 	.word	0x40014400
 800093c:	40014800 	.word	0x40014800
		  }
		  else {
			  timerBaseAddr = TIM12;
 8000940:	4b93      	ldr	r3, [pc, #588]	@ (8000b90 <main+0x564>)
 8000942:	617b      	str	r3, [r7, #20]
			  Channel = TIM_CHANNEL_1;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
			  sConfig_nonConst.Pulse = (Timer_Init.Prescaler*90)/100;
 8000948:	4b92      	ldr	r3, [pc, #584]	@ (8000b94 <main+0x568>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	225a      	movs	r2, #90	@ 0x5a
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	4a91      	ldr	r2, [pc, #580]	@ (8000b98 <main+0x56c>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	095b      	lsrs	r3, r3, #5
 800095a:	4a90      	ldr	r2, [pc, #576]	@ (8000b9c <main+0x570>)
 800095c:	6053      	str	r3, [r2, #4]
			  PWM_Config(timerBaseAddr, sConfig_nonConst, Channel, i);
 800095e:	4c8f      	ldr	r4, [pc, #572]	@ (8000b9c <main+0x570>)
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	9305      	str	r3, [sp, #20]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	9304      	str	r3, [sp, #16]
 8000968:	466d      	mov	r5, sp
 800096a:	f104 030c 	add.w	r3, r4, #12
 800096e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000970:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000974:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000978:	6978      	ldr	r0, [r7, #20]
 800097a:	f000 f963 	bl	8000c44 <PWM_Config>
	  for(int i = 0; i < 4; i++){
 800097e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000980:	3301      	adds	r3, #1
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
 8000984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000986:	2b03      	cmp	r3, #3
 8000988:	f77f af6e 	ble.w	8000868 <main+0x23c>


	  /***********************************************************************
	   ***************               Start Timer               ***************
	   ***********************************************************************/
	  if (HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2) != HAL_OK) {
 800098c:	2104      	movs	r1, #4
 800098e:	4884      	ldr	r0, [pc, #528]	@ (8000ba0 <main+0x574>)
 8000990:	f001 fbd0 	bl	8002134 <HAL_TIM_PWM_Start>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <main+0x372>
		  Error_Handler();
 800099a:	f000 fa4f 	bl	8000e3c <Error_Handler>
	  }

	  if (HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1) != HAL_OK) {
 800099e:	2100      	movs	r1, #0
 80009a0:	4880      	ldr	r0, [pc, #512]	@ (8000ba4 <main+0x578>)
 80009a2:	f001 fbc7 	bl	8002134 <HAL_TIM_PWM_Start>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <main+0x384>
		  Error_Handler();
 80009ac:	f000 fa46 	bl	8000e3c <Error_Handler>
	  }

	  if (HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK) {
 80009b0:	2100      	movs	r1, #0
 80009b2:	487d      	ldr	r0, [pc, #500]	@ (8000ba8 <main+0x57c>)
 80009b4:	f001 fbbe 	bl	8002134 <HAL_TIM_PWM_Start>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <main+0x396>
		  Error_Handler();
 80009be:	f000 fa3d 	bl	8000e3c <Error_Handler>
	  }

	  if (HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1) != HAL_OK) {
 80009c2:	2100      	movs	r1, #0
 80009c4:	4876      	ldr	r0, [pc, #472]	@ (8000ba0 <main+0x574>)
 80009c6:	f001 fbb5 	bl	8002134 <HAL_TIM_PWM_Start>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <main+0x3a8>
		  Error_Handler();
 80009d0:	f000 fa34 	bl	8000e3c <Error_Handler>
	  }

	  uint8_t brightness12_2Delta = 100;
 80009d4:	2364      	movs	r3, #100	@ 0x64
 80009d6:	76fb      	strb	r3, [r7, #27]
	  uint8_t brightness10_1Delta = 200;
 80009d8:	23c8      	movs	r3, #200	@ 0xc8
 80009da:	76bb      	strb	r3, [r7, #26]
	  uint8_t brightness11_1Delta = 300;
 80009dc:	232c      	movs	r3, #44	@ 0x2c
 80009de:	767b      	strb	r3, [r7, #25]
	  uint8_t brightness12_1Delta = 400;
 80009e0:	2390      	movs	r3, #144	@ 0x90
 80009e2:	763b      	strb	r3, [r7, #24]

	  uint16_t brightness12_2 = 1000 + brightness12_2Delta;
 80009e4:	7efb      	ldrb	r3, [r7, #27]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80009ec:	847b      	strh	r3, [r7, #34]	@ 0x22
	  uint16_t brightness10_1 = 1000 + brightness10_1Delta;
 80009ee:	7ebb      	ldrb	r3, [r7, #26]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80009f6:	843b      	strh	r3, [r7, #32]
	  uint16_t brightness11_1 = 1000 + brightness11_1Delta;
 80009f8:	7e7b      	ldrb	r3, [r7, #25]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000a00:	83fb      	strh	r3, [r7, #30]
	  uint16_t brightness12_1 = 1000 + brightness12_1Delta;
 8000a02:	7e3b      	ldrb	r3, [r7, #24]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000a0a:	83bb      	strh	r3, [r7, #28]


	  while(1) {
		  while(htim12.Instance->CCR2 < 10000) {
 8000a0c:	e059      	b.n	8000ac2 <main+0x496>
			  brightness12_2+=brightness12_2Delta;
 8000a0e:	7efb      	ldrb	r3, [r7, #27]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a14:	4413      	add	r3, r2
 8000a16:	847b      	strh	r3, [r7, #34]	@ 0x22
			  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, brightness12_2);
 8000a18:	4b61      	ldr	r3, [pc, #388]	@ (8000ba0 <main+0x574>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000a1e:	639a      	str	r2, [r3, #56]	@ 0x38
			  if (brightness10_1+brightness10_1Delta > 10000) {
 8000a20:	8c3a      	ldrh	r2, [r7, #32]
 8000a22:	7ebb      	ldrb	r3, [r7, #26]
 8000a24:	4413      	add	r3, r2
 8000a26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	dd09      	ble.n	8000a42 <main+0x416>
				  __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, brightness10_1-=brightness10_1Delta);
 8000a2e:	7ebb      	ldrb	r3, [r7, #26]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	8c3a      	ldrh	r2, [r7, #32]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	843b      	strh	r3, [r7, #32]
 8000a38:	4b5a      	ldr	r3, [pc, #360]	@ (8000ba4 <main+0x578>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	8c3a      	ldrh	r2, [r7, #32]
 8000a3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a40:	e008      	b.n	8000a54 <main+0x428>
			  }
			  else
				  __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, brightness10_1+=brightness10_1Delta);
 8000a42:	7ebb      	ldrb	r3, [r7, #26]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8c3b      	ldrh	r3, [r7, #32]
 8000a48:	4413      	add	r3, r2
 8000a4a:	843b      	strh	r3, [r7, #32]
 8000a4c:	4b55      	ldr	r3, [pc, #340]	@ (8000ba4 <main+0x578>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	8c3a      	ldrh	r2, [r7, #32]
 8000a52:	635a      	str	r2, [r3, #52]	@ 0x34
			  if (brightness11_1+brightness11_1Delta > 10000) {
 8000a54:	8bfa      	ldrh	r2, [r7, #30]
 8000a56:	7e7b      	ldrb	r3, [r7, #25]
 8000a58:	4413      	add	r3, r2
 8000a5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	dd09      	ble.n	8000a76 <main+0x44a>
				  __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, brightness11_1-=brightness11_1Delta);
 8000a62:	7e7b      	ldrb	r3, [r7, #25]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	8bfa      	ldrh	r2, [r7, #30]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	83fb      	strh	r3, [r7, #30]
 8000a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba8 <main+0x57c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	8bfa      	ldrh	r2, [r7, #30]
 8000a72:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a74:	e008      	b.n	8000a88 <main+0x45c>
			  }
			  else
				  __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, brightness11_1+=brightness11_1Delta);
 8000a76:	7e7b      	ldrb	r3, [r7, #25]
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	8bfb      	ldrh	r3, [r7, #30]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	83fb      	strh	r3, [r7, #30]
 8000a80:	4b49      	ldr	r3, [pc, #292]	@ (8000ba8 <main+0x57c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	8bfa      	ldrh	r2, [r7, #30]
 8000a86:	635a      	str	r2, [r3, #52]	@ 0x34
			  if (brightness12_1+brightness12_1Delta > 10000) {
 8000a88:	8bba      	ldrh	r2, [r7, #28]
 8000a8a:	7e3b      	ldrb	r3, [r7, #24]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a92:	4293      	cmp	r3, r2
 8000a94:	dd09      	ble.n	8000aaa <main+0x47e>
				  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, brightness12_1-=brightness12_1Delta);
 8000a96:	7e3b      	ldrb	r3, [r7, #24]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	8bba      	ldrh	r2, [r7, #28]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	83bb      	strh	r3, [r7, #28]
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba0 <main+0x574>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	8bba      	ldrh	r2, [r7, #28]
 8000aa6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa8:	e008      	b.n	8000abc <main+0x490>
			  }
			  else
				  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, brightness12_1+=brightness12_1Delta);
 8000aaa:	7e3b      	ldrb	r3, [r7, #24]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	8bbb      	ldrh	r3, [r7, #28]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	83bb      	strh	r3, [r7, #28]
 8000ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba0 <main+0x574>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	8bba      	ldrh	r2, [r7, #28]
 8000aba:	635a      	str	r2, [r3, #52]	@ 0x34
			  HAL_Delay(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 fb29 	bl	8001114 <HAL_Delay>
		  while(htim12.Instance->CCR2 < 10000) {
 8000ac2:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <main+0x574>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d99e      	bls.n	8000a0e <main+0x3e2>
		  }
		  while(htim12.Instance->CCR2 > 1000) {
 8000ad0:	e056      	b.n	8000b80 <main+0x554>
			  brightness12_2-=brightness12_2Delta;
 8000ad2:	7efb      	ldrb	r3, [r7, #27]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	847b      	strh	r3, [r7, #34]	@ 0x22
			  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, brightness12_2);
 8000adc:	4b30      	ldr	r3, [pc, #192]	@ (8000ba0 <main+0x574>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000ae2:	639a      	str	r2, [r3, #56]	@ 0x38
			  if (brightness10_1-brightness10_1Delta < 1000) {
 8000ae4:	8c3a      	ldrh	r2, [r7, #32]
 8000ae6:	7ebb      	ldrb	r3, [r7, #26]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000aee:	da09      	bge.n	8000b04 <main+0x4d8>
				  __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, brightness10_1+=brightness10_1Delta);
 8000af0:	7ebb      	ldrb	r3, [r7, #26]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	8c3b      	ldrh	r3, [r7, #32]
 8000af6:	4413      	add	r3, r2
 8000af8:	843b      	strh	r3, [r7, #32]
 8000afa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <main+0x578>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	8c3a      	ldrh	r2, [r7, #32]
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b02:	e008      	b.n	8000b16 <main+0x4ea>
			  }
			  else
				  __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, brightness10_1-=brightness10_1Delta);
 8000b04:	7ebb      	ldrb	r3, [r7, #26]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	8c3a      	ldrh	r2, [r7, #32]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	843b      	strh	r3, [r7, #32]
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <main+0x578>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	8c3a      	ldrh	r2, [r7, #32]
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
			  if (brightness11_1-brightness11_1Delta < 1000) {
 8000b16:	8bfa      	ldrh	r2, [r7, #30]
 8000b18:	7e7b      	ldrb	r3, [r7, #25]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b20:	da09      	bge.n	8000b36 <main+0x50a>
				  __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, brightness11_1+=brightness11_1Delta);
 8000b22:	7e7b      	ldrb	r3, [r7, #25]
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	8bfb      	ldrh	r3, [r7, #30]
 8000b28:	4413      	add	r3, r2
 8000b2a:	83fb      	strh	r3, [r7, #30]
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <main+0x57c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	8bfa      	ldrh	r2, [r7, #30]
 8000b32:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b34:	e008      	b.n	8000b48 <main+0x51c>
			  }
			  else
			  __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, brightness11_1-=brightness11_1Delta);
 8000b36:	7e7b      	ldrb	r3, [r7, #25]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	8bfa      	ldrh	r2, [r7, #30]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	83fb      	strh	r3, [r7, #30]
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <main+0x57c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	8bfa      	ldrh	r2, [r7, #30]
 8000b46:	635a      	str	r2, [r3, #52]	@ 0x34
			  if (brightness12_1-brightness12_1Delta < 1000) {
 8000b48:	8bba      	ldrh	r2, [r7, #28]
 8000b4a:	7e3b      	ldrb	r3, [r7, #24]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b52:	da09      	bge.n	8000b68 <main+0x53c>
				  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, brightness12_1+=brightness12_1Delta);
 8000b54:	7e3b      	ldrb	r3, [r7, #24]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	8bbb      	ldrh	r3, [r7, #28]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	83bb      	strh	r3, [r7, #28]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <main+0x574>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	8bba      	ldrh	r2, [r7, #28]
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b66:	e008      	b.n	8000b7a <main+0x54e>
			  }
			  else
			  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, brightness12_1-=brightness12_1Delta);
 8000b68:	7e3b      	ldrb	r3, [r7, #24]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	8bba      	ldrh	r2, [r7, #28]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	83bb      	strh	r3, [r7, #28]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <main+0x574>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	8bba      	ldrh	r2, [r7, #28]
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
			  HAL_Delay(1);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 faca 	bl	8001114 <HAL_Delay>
		  while(htim12.Instance->CCR2 > 1000) {
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <main+0x574>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b8a:	d8a2      	bhi.n	8000ad2 <main+0x4a6>
		  while(htim12.Instance->CCR2 < 10000) {
 8000b8c:	e799      	b.n	8000ac2 <main+0x496>
 8000b8e:	bf00      	nop
 8000b90:	40001800 	.word	0x40001800
 8000b94:	20000094 	.word	0x20000094
 8000b98:	51eb851f 	.word	0x51eb851f
 8000b9c:	20000078 	.word	0x20000078
 8000ba0:	200001cc 	.word	0x200001cc
 8000ba4:	20000134 	.word	0x20000134
 8000ba8:	20000180 	.word	0x20000180

08000bac <SystemClock_Config>:


	return 0;
}

void SystemClock_Config() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b092      	sub	sp, #72	@ 0x48
 8000bb0:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef oscInitStruct;
	RCC_ClkInitTypeDef clockInitStruct;

	oscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bb6:	61bb      	str	r3, [r7, #24]
	oscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
	oscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
	oscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	oscInitStruct.PLL.PLLM = 19;
 8000bc6:	2313      	movs	r3, #19
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
	oscInitStruct.PLL.PLLN = 152;
 8000bca:	2398      	movs	r3, #152	@ 0x98
 8000bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
	oscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if( HAL_RCC_OscConfig(&oscInitStruct) != HAL_OK) {
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fdc0 	bl	800175c <HAL_RCC_OscConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x3a>
		Error_Handler();
 8000be2:	f000 f92b 	bl	8000e3c <Error_Handler>
	}

	clockInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000be6:	230f      	movs	r3, #15
 8000be8:	603b      	str	r3, [r7, #0]
	clockInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bea:	2302      	movs	r3, #2
 8000bec:	607b      	str	r3, [r7, #4]
	clockInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	60bb      	str	r3, [r7, #8]
	clockInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
	clockInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
	if( HAL_RCC_ClockConfig(&clockInitStruct, FLASH_ACR_LATENCY_1WS) != HAL_OK) {
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f85a 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x62>
		Error_Handler();
 8000c0a:	f000 f917 	bl	8000e3c <Error_Handler>
	}

	// Turn of HSI to save power
	__HAL_RCC_HSI_DISABLE();
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <SystemClock_Config+0x90>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <SystemClock_Config+0x90>)
 8000c14:	f023 0301 	bic.w	r3, r3, #1
 8000c18:	6013      	str	r3, [r2, #0]

	// Reconfigure Systick now to work with the new System Clock Frequency
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c1a:	f001 f9ff 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <SystemClock_Config+0x94>)
 8000c22:	fba2 2303 	umull	r2, r3, r2, r3
 8000c26:	099b      	lsrs	r3, r3, #6
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fb9c 	bl	8001366 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c2e:	2004      	movs	r0, #4
 8000c30:	f000 fba6 	bl	8001380 <HAL_SYSTICK_CLKSourceConfig>

}
 8000c34:	bf00      	nop
 8000c36:	3748      	adds	r7, #72	@ 0x48
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	10624dd3 	.word	0x10624dd3

08000c44 <PWM_Config>:

void PWM_Config(TIM_TypeDef *Instance, TIM_OC_InitTypeDef sConfig_nonConst, uint32_t Channel, int i) {
 8000c44:	b084      	sub	sp, #16
 8000c46:	b5b0      	push	{r4, r5, r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	f107 001c 	add.w	r0, r7, #28
 8000c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(i == 0 || i == 3) {
 8000c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <PWM_Config+0x1e>
 8000c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d121      	bne.n	8000ca6 <PWM_Config+0x62>
		htim12.Instance = Instance;
 8000c62:	4a38      	ldr	r2, [pc, #224]	@ (8000d44 <PWM_Config+0x100>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6013      	str	r3, [r2, #0]
		htim12.Init = Timer_Init;
 8000c68:	4b36      	ldr	r3, [pc, #216]	@ (8000d44 <PWM_Config+0x100>)
 8000c6a:	4a37      	ldr	r2, [pc, #220]	@ (8000d48 <PWM_Config+0x104>)
 8000c6c:	1d1c      	adds	r4, r3, #4
 8000c6e:	4615      	mov	r5, r2
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c78:	e884 0003 	stmia.w	r4, {r0, r1}
		if(HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8000c7c:	4831      	ldr	r0, [pc, #196]	@ (8000d44 <PWM_Config+0x100>)
 8000c7e:	f001 fa01 	bl	8002084 <HAL_TIM_PWM_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <PWM_Config+0x48>
			Error_Handler();
 8000c88:	f000 f8d8 	bl	8000e3c <Error_Handler>
		};
		  // Configure the Channel for the Input Capture Timer
			if(HAL_TIM_PWM_ConfigChannel(&htim12, &sConfig_nonConst, Channel) != HAL_OK) {
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c92:	4619      	mov	r1, r3
 8000c94:	482b      	ldr	r0, [pc, #172]	@ (8000d44 <PWM_Config+0x100>)
 8000c96:	f001 fc4f 	bl	8002538 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d049      	beq.n	8000d34 <PWM_Config+0xf0>
				Error_Handler();
 8000ca0:	f000 f8cc 	bl	8000e3c <Error_Handler>
			if(HAL_TIM_PWM_ConfigChannel(&htim12, &sConfig_nonConst, Channel) != HAL_OK) {
 8000ca4:	e046      	b.n	8000d34 <PWM_Config+0xf0>
			};
	}
	else if(i == 1) {
 8000ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d121      	bne.n	8000cf0 <PWM_Config+0xac>
		htim10.Instance = Instance;
 8000cac:	4a27      	ldr	r2, [pc, #156]	@ (8000d4c <PWM_Config+0x108>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
		htim10.Init = Timer_Init;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <PWM_Config+0x108>)
 8000cb4:	4a24      	ldr	r2, [pc, #144]	@ (8000d48 <PWM_Config+0x104>)
 8000cb6:	1d1c      	adds	r4, r3, #4
 8000cb8:	4615      	mov	r5, r2
 8000cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cc2:	e884 0003 	stmia.w	r4, {r0, r1}
		if(HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 8000cc6:	4821      	ldr	r0, [pc, #132]	@ (8000d4c <PWM_Config+0x108>)
 8000cc8:	f001 f9dc 	bl	8002084 <HAL_TIM_PWM_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <PWM_Config+0x92>
			Error_Handler();
 8000cd2:	f000 f8b3 	bl	8000e3c <Error_Handler>
		};
		  // Configure the Channel for the Input Capture Timer
			if(HAL_TIM_PWM_ConfigChannel(&htim10, &sConfig_nonConst, Channel) != HAL_OK) {
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481b      	ldr	r0, [pc, #108]	@ (8000d4c <PWM_Config+0x108>)
 8000ce0:	f001 fc2a 	bl	8002538 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d024      	beq.n	8000d34 <PWM_Config+0xf0>
				Error_Handler();
 8000cea:	f000 f8a7 	bl	8000e3c <Error_Handler>
		  // Configure the Channel for the Input Capture Timer
			if(HAL_TIM_PWM_ConfigChannel(&htim11, &sConfig_nonConst, Channel) != HAL_OK) {
				Error_Handler();
			};
	}
}
 8000cee:	e021      	b.n	8000d34 <PWM_Config+0xf0>
		htim11.Instance = Instance;
 8000cf0:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <PWM_Config+0x10c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
		htim11.Init = Timer_Init;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <PWM_Config+0x10c>)
 8000cf8:	4a13      	ldr	r2, [pc, #76]	@ (8000d48 <PWM_Config+0x104>)
 8000cfa:	1d1c      	adds	r4, r3, #4
 8000cfc:	4615      	mov	r5, r2
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d06:	e884 0003 	stmia.w	r4, {r0, r1}
		if(HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 8000d0a:	4811      	ldr	r0, [pc, #68]	@ (8000d50 <PWM_Config+0x10c>)
 8000d0c:	f001 f9ba 	bl	8002084 <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <PWM_Config+0xd6>
			Error_Handler();
 8000d16:	f000 f891 	bl	8000e3c <Error_Handler>
			if(HAL_TIM_PWM_ConfigChannel(&htim11, &sConfig_nonConst, Channel) != HAL_OK) {
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <PWM_Config+0x10c>)
 8000d24:	f001 fc08 	bl	8002538 <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <PWM_Config+0xf0>
				Error_Handler();
 8000d2e:	f000 f885 	bl	8000e3c <Error_Handler>
}
 8000d32:	e7ff      	b.n	8000d34 <PWM_Config+0xf0>
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000d3e:	b004      	add	sp, #16
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200001cc 	.word	0x200001cc
 8000d48:	20000094 	.word	0x20000094
 8000d4c:	20000134 	.word	0x20000134
 8000d50:	20000180 	.word	0x20000180

08000d54 <UART6_Init>:

void UART6_Init(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	// Start UART6 Clock
	__HAL_RCC_USART6_CLK_ENABLE();
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <UART6_Init+0x5c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <UART6_Init+0x5c>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <UART6_Init+0x5c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

	huart6.Instance = USART6;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <UART6_Init+0x60>)
 8000d74:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <UART6_Init+0x64>)
 8000d76:	601a      	str	r2, [r3, #0]
	huart6.Init.Mode = UART_MODE_TX;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <UART6_Init+0x60>)
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	615a      	str	r2, [r3, #20]
	huart6.Init.BaudRate = 115200;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <UART6_Init+0x60>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <UART6_Init+0x60>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <UART6_Init+0x60>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <UART6_Init+0x60>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
	if ( HAL_UART_Init(&huart6) != HAL_OK ) {
 8000d98:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <UART6_Init+0x60>)
 8000d9a:	f002 f860 	bl	8002e5e <HAL_UART_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <UART6_Init+0x54>
		Error_Handler();
 8000da4:	f000 f84a 	bl	8000e3c <Error_Handler>
	}
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	200000ac 	.word	0x200000ac
 8000db8:	40011400 	.word	0x40011400

08000dbc <BTN_GPIO_Init>:

void BTN_GPIO_Init(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <BTN_GPIO_Init+0x4c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <BTN_GPIO_Init+0x4c>)
 8000dc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <BTN_GPIO_Init+0x4c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpioJ_Init;
	memset(&gpioJ_Init, 0, sizeof(gpioJ_Init));
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2214      	movs	r2, #20
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fdb3 	bl	800394c <memset>
	gpioJ_Init.Pin = GPIO_PIN_1;
 8000de6:	2302      	movs	r3, #2
 8000de8:	607b      	str	r3, [r7, #4]
	gpioJ_Init.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
	gpioJ_Init.Pull = GPIO_PULLUP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
	gpioJ_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOJ, &gpioJ_Init);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <BTN_GPIO_Init+0x50>)
 8000dfc:	f000 faea 	bl	80013d4 <HAL_GPIO_Init>

}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40022400 	.word	0x40022400

08000e10 <wait>:

void wait(void) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
	  uint32_t waitVar =(uint32_t)0xfffff;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <wait+0x28>)
 8000e18:	607b      	str	r3, [r7, #4]
	  while(waitVar > 0) {
 8000e1a:	e002      	b.n	8000e22 <wait+0x12>
		  waitVar--;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
	  while(waitVar > 0) {
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f9      	bne.n	8000e1c <wait+0xc>
	  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	000fffff 	.word	0x000fffff

08000e3c <Error_Handler>:

void Error_Handler(void) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	while(1);
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x4>

08000e44 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	// Perform the low level processor specific inits here using processor specific API's provided by the Cube HAL layer in Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_cortex.c
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 fa57 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= (0x7 << 16);
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_MspInit+0x40>)
 8000e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e52:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <HAL_MspInit+0x40>)
 8000e54:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000e58:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3. Configure the prority for the system
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f06f 000b 	mvn.w	r0, #11
 8000e62:	f000 fa56 	bl	8001312 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f06f 000a 	mvn.w	r0, #10
 8000e6e:	f000 fa50 	bl	8001312 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	f06f 0009 	mvn.w	r0, #9
 8000e7a:	f000 fa4a 	bl	8001312 <HAL_NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	// Start GPIOC Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_UART_MspInit+0x40>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <HAL_UART_MspInit+0x40>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_UART_MspInit+0x40>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio_uart_init;
	gpio_uart_init.Pin = GPIO_PIN_6;
 8000ea8:	2340      	movs	r3, #64	@ 0x40
 8000eaa:	60fb      	str	r3, [r7, #12]
	gpio_uart_init.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
	gpio_uart_init.Alternate = GPIO_AF8_USART6;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &gpio_uart_init);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <HAL_UART_MspInit+0x44>)
 8000ebc:	f000 fa8a 	bl	80013d4 <HAL_GPIO_Init>
}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	 */

	/***********************************************************************
	 ***************          Configure All GPIOCLK          ***************
	 ***********************************************************************/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef0:	4b38      	ldr	r3, [pc, #224]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	4a37      	ldr	r2, [pc, #220]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000ef6:	f043 0320 	orr.w	r3, r3, #32
 8000efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efc:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f08:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	4a31      	ldr	r2, [pc, #196]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f14:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0x104>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]

	/*
	 * Initialize and populate member of InitTypeDef structure for GPIO Peripheral
	 */
	GPIO_InitTypeDef GPIO_Init;
	memset(&GPIO_Init, 0, sizeof(GPIO_Init));
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2214      	movs	r2, #20
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fd0f 	bl	800394c <memset>
	GPIO_Init.Pin = GPIO_PIN_15;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f32:	617b      	str	r3, [r7, #20]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Pull = GPIO_PULLDOWN;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	GPIO_Init.Alternate = GPIO_AF9_TIM12;
 8000f40:	2309      	movs	r3, #9
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24

	/*
	 * Inititialize GPIOF Peripheral
	 */
	HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4823      	ldr	r0, [pc, #140]	@ (8000fd8 <HAL_TIM_PWM_MspInit+0x108>)
 8000f4c:	f000 fa42 	bl	80013d4 <HAL_GPIO_Init>
	 ***********************************************************************/

	/*
	 * Initialize and populate member of InitTypeDef structure for GPIO Peripheral
	 */
	memset(&GPIO_Init, 0, sizeof(GPIO_Init));
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2214      	movs	r2, #20
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fcf7 	bl	800394c <memset>
	GPIO_Init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	617b      	str	r3, [r7, #20]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = GPIO_AF3_TIM10 | GPIO_AF3_TIM11;
 8000f66:	2303      	movs	r3, #3
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24

	/*
	 * Inititialize GPIOF Peripheral
	 */
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481a      	ldr	r0, [pc, #104]	@ (8000fdc <HAL_TIM_PWM_MspInit+0x10c>)
 8000f72:	f000 fa2f 	bl	80013d4 <HAL_GPIO_Init>
	 ***********************************************************************/

	/*
	 * Initialize and populate member of InitTypeDef structure for GPIO Peripheral
	 */
	memset(&GPIO_Init, 0, sizeof(GPIO_Init));
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2214      	movs	r2, #20
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fce4 	bl	800394c <memset>
	GPIO_Init.Pin = GPIO_PIN_6;
 8000f84:	2340      	movs	r3, #64	@ 0x40
 8000f86:	617b      	str	r3, [r7, #20]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = GPIO_AF9_TIM12;
 8000f8c:	2309      	movs	r3, #9
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24

	/*
	 * Inititialize GPIOF Peripheral
	 */
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <HAL_TIM_PWM_MspInit+0x110>)
 8000f98:	f000 fa1c 	bl	80013d4 <HAL_GPIO_Init>

	/***********************************************************************
	 ***************           Set and Enable IRQ's          ***************
	 ***********************************************************************/

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f000 f9b6 	bl	8001312 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f000 f9cf 	bl	800134a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	210f      	movs	r1, #15
 8000fb0:	201a      	movs	r0, #26
 8000fb2:	f000 f9ae 	bl	8001312 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fb6:	201a      	movs	r0, #26
 8000fb8:	f000 f9c7 	bl	800134a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 15, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	202b      	movs	r0, #43	@ 0x2b
 8000fc2:	f000 f9a6 	bl	8001312 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000fc6:	202b      	movs	r0, #43	@ 0x2b
 8000fc8:	f000 f9bf 	bl	800134a <HAL_NVIC_EnableIRQ>


}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	@ 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021c00 	.word	0x40021c00

08000fe4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100c:	f7ff ffea 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001036:	f002 fc91 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff faf7 	bl	800062c <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800104c:	080044b4 	.word	0x080044b4
  ldr r2, =_sbss
 8001050:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001054:	20000430 	.word	0x20000430

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>

0800105a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f94c 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001064:	200f      	movs	r0, #15
 8001066:	f000 f805 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f7ff feeb 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f967 	bl	8001366 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b0:	f000 f92f 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	@ (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008
 80010f8:	200002e0 	.word	0x200002e0

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	200002e0 	.word	0x200002e0

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <__NVIC_SetPriorityGrouping+0x40>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	4313      	orrs	r3, r2
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	@ (800119c <__NVIC_SetPriorityGrouping+0x40>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	05fa0000 	.word	0x05fa0000

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff29 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff3e 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff31 	bl	80011c0 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffa2 	bl	80012b8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b04      	cmp	r3, #4
 800138c:	d106      	bne.n	800139c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800139a:	e005      	b.n	80013a8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013a2:	f023 0304 	bic.w	r3, r3, #4
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013bc:	f000 f802 	bl	80013c4 <HAL_SYSTICK_Callback>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e175      	b.n	80016e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	f040 8164 	bne.w	80016da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d005      	beq.n	800142a <HAL_GPIO_Init+0x56>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d130      	bne.n	800148c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 0201 	and.w	r2, r3, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d017      	beq.n	80014c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d123      	bne.n	800151c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	220f      	movs	r2, #15
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80be 	beq.w	80016da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b66      	ldr	r3, [pc, #408]	@ (80016f8 <HAL_GPIO_Init+0x324>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a65      	ldr	r2, [pc, #404]	@ (80016f8 <HAL_GPIO_Init+0x324>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <HAL_GPIO_Init+0x324>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001576:	4a61      	ldr	r2, [pc, #388]	@ (80016fc <HAL_GPIO_Init+0x328>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a58      	ldr	r2, [pc, #352]	@ (8001700 <HAL_GPIO_Init+0x32c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d037      	beq.n	8001612 <HAL_GPIO_Init+0x23e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a57      	ldr	r2, [pc, #348]	@ (8001704 <HAL_GPIO_Init+0x330>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d031      	beq.n	800160e <HAL_GPIO_Init+0x23a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a56      	ldr	r2, [pc, #344]	@ (8001708 <HAL_GPIO_Init+0x334>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d02b      	beq.n	800160a <HAL_GPIO_Init+0x236>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a55      	ldr	r2, [pc, #340]	@ (800170c <HAL_GPIO_Init+0x338>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d025      	beq.n	8001606 <HAL_GPIO_Init+0x232>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a54      	ldr	r2, [pc, #336]	@ (8001710 <HAL_GPIO_Init+0x33c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01f      	beq.n	8001602 <HAL_GPIO_Init+0x22e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a53      	ldr	r2, [pc, #332]	@ (8001714 <HAL_GPIO_Init+0x340>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x22a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a52      	ldr	r2, [pc, #328]	@ (8001718 <HAL_GPIO_Init+0x344>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x226>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a51      	ldr	r2, [pc, #324]	@ (800171c <HAL_GPIO_Init+0x348>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x222>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a50      	ldr	r2, [pc, #320]	@ (8001720 <HAL_GPIO_Init+0x34c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x21e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001724 <HAL_GPIO_Init+0x350>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x21a>
 80015ea:	2309      	movs	r3, #9
 80015ec:	e012      	b.n	8001614 <HAL_GPIO_Init+0x240>
 80015ee:	230a      	movs	r3, #10
 80015f0:	e010      	b.n	8001614 <HAL_GPIO_Init+0x240>
 80015f2:	2308      	movs	r3, #8
 80015f4:	e00e      	b.n	8001614 <HAL_GPIO_Init+0x240>
 80015f6:	2307      	movs	r3, #7
 80015f8:	e00c      	b.n	8001614 <HAL_GPIO_Init+0x240>
 80015fa:	2306      	movs	r3, #6
 80015fc:	e00a      	b.n	8001614 <HAL_GPIO_Init+0x240>
 80015fe:	2305      	movs	r3, #5
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x240>
 8001602:	2304      	movs	r3, #4
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x240>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x240>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x240>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x240>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001624:	4935      	ldr	r1, [pc, #212]	@ (80016fc <HAL_GPIO_Init+0x328>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <HAL_GPIO_Init+0x354>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a34      	ldr	r2, [pc, #208]	@ (8001728 <HAL_GPIO_Init+0x354>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b32      	ldr	r3, [pc, #200]	@ (8001728 <HAL_GPIO_Init+0x354>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a29      	ldr	r2, [pc, #164]	@ (8001728 <HAL_GPIO_Init+0x354>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_GPIO_Init+0x354>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <HAL_GPIO_Init+0x354>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_GPIO_Init+0x354>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <HAL_GPIO_Init+0x354>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f ae86 	bls.w	80013f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3724      	adds	r7, #36	@ 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40013800 	.word	0x40013800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40021400 	.word	0x40021400
 8001718:	40021800 	.word	0x40021800
 800171c:	40021c00 	.word	0x40021c00
 8001720:	40022000 	.word	0x40022000
 8001724:	40022400 	.word	0x40022400
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e001      	b.n	800174e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e29b      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8087 	beq.w	800188e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001780:	4b96      	ldr	r3, [pc, #600]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b04      	cmp	r3, #4
 800178a:	d00c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178c:	4b93      	ldr	r3, [pc, #588]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d112      	bne.n	80017be <HAL_RCC_OscConfig+0x62>
 8001798:	4b90      	ldr	r3, [pc, #576]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4b8d      	ldr	r3, [pc, #564]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d06c      	beq.n	800188c <HAL_RCC_OscConfig+0x130>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d168      	bne.n	800188c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e275      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x7a>
 80017c8:	4b84      	ldr	r3, [pc, #528]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a83      	ldr	r2, [pc, #524]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e02e      	b.n	8001834 <HAL_RCC_OscConfig+0xd8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x9c>
 80017de:	4b7f      	ldr	r3, [pc, #508]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7e      	ldr	r2, [pc, #504]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80017e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b7c      	ldr	r3, [pc, #496]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7b      	ldr	r2, [pc, #492]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e01d      	b.n	8001834 <HAL_RCC_OscConfig+0xd8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0xc0>
 8001802:	4b76      	ldr	r3, [pc, #472]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a75      	ldr	r2, [pc, #468]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b73      	ldr	r3, [pc, #460]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a72      	ldr	r2, [pc, #456]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0xd8>
 800181c:	4b6f      	ldr	r3, [pc, #444]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a6e      	ldr	r2, [pc, #440]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b6c      	ldr	r3, [pc, #432]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6b      	ldr	r2, [pc, #428]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800182e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fc5e 	bl	80010fc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fc5a 	bl	80010fc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e229      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b61      	ldr	r3, [pc, #388]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0xe8>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fc4a 	bl	80010fc <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fc46 	bl	80010fc <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	@ 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e215      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	4b57      	ldr	r3, [pc, #348]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x110>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d069      	beq.n	800196e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	4b50      	ldr	r3, [pc, #320]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a6:	4b4d      	ldr	r3, [pc, #308]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d11c      	bne.n	80018ec <HAL_RCC_OscConfig+0x190>
 80018b2:	4b4a      	ldr	r3, [pc, #296]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d116      	bne.n	80018ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	4b47      	ldr	r3, [pc, #284]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e1e9      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b41      	ldr	r3, [pc, #260]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	493d      	ldr	r1, [pc, #244]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	e040      	b.n	800196e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d023      	beq.n	800193c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f4:	4b39      	ldr	r3, [pc, #228]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a38      	ldr	r2, [pc, #224]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fbfc 	bl	80010fc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fbf8 	bl	80010fc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1c7      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b30      	ldr	r3, [pc, #192]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b2d      	ldr	r3, [pc, #180]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4929      	ldr	r1, [pc, #164]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
 800193a:	e018      	b.n	800196e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a26      	ldr	r2, [pc, #152]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fbd8 	bl	80010fc <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fbd4 	bl	80010fc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1a3      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d038      	beq.n	80019ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001986:	4a15      	ldr	r2, [pc, #84]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff fbb5 	bl	80010fc <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff fbb1 	bl	80010fc <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e180      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80019aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x23a>
 80019b4:	e01a      	b.n	80019ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80019b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ba:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <HAL_RCC_OscConfig+0x280>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff fb9b 	bl	80010fc <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff fb97 	bl	80010fc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d903      	bls.n	80019e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e166      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
 80019dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b92      	ldr	r3, [pc, #584]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ee      	bne.n	80019ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a4 	beq.w	8001b42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b8c      	ldr	r3, [pc, #560]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b89      	ldr	r3, [pc, #548]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a88      	ldr	r2, [pc, #544]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b86      	ldr	r3, [pc, #536]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a22:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <HAL_RCC_OscConfig+0x4d4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a2e:	4b80      	ldr	r3, [pc, #512]	@ (8001c30 <HAL_RCC_OscConfig+0x4d4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7f      	ldr	r2, [pc, #508]	@ (8001c30 <HAL_RCC_OscConfig+0x4d4>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fb5f 	bl	80010fc <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff fb5b 	bl	80010fc <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	@ 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e12a      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a54:	4b76      	ldr	r3, [pc, #472]	@ (8001c30 <HAL_RCC_OscConfig+0x4d4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x31a>
 8001a68:	4b70      	ldr	r3, [pc, #448]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6c:	4a6f      	ldr	r2, [pc, #444]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a74:	e02d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x376>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x33c>
 8001a7e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a82:	4a6a      	ldr	r2, [pc, #424]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a8a:	4b68      	ldr	r3, [pc, #416]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	4a67      	ldr	r2, [pc, #412]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a96:	e01c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x376>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x35e>
 8001aa0:	4b62      	ldr	r3, [pc, #392]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa4:	4a61      	ldr	r2, [pc, #388]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aac:	4b5f      	ldr	r3, [pc, #380]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab0:	4a5e      	ldr	r2, [pc, #376]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab8:	e00b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x376>
 8001aba:	4b5c      	ldr	r3, [pc, #368]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abe:	4a5b      	ldr	r2, [pc, #364]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac6:	4b59      	ldr	r3, [pc, #356]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	4a58      	ldr	r2, [pc, #352]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d015      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff fb0f 	bl	80010fc <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fb0b 	bl	80010fc <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0d8      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x386>
 8001b04:	e014      	b.n	8001b30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff faf9 	bl	80010fc <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff faf5 	bl	80010fc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e0c2      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	4b41      	ldr	r3, [pc, #260]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80ae 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d06d      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d14b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a31      	ldr	r2, [pc, #196]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fac6 	bl	80010fc <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff fac2 	bl	80010fc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e091      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	3b01      	subs	r3, #1
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	071b      	lsls	r3, r3, #28
 8001bbe:	491b      	ldr	r1, [pc, #108]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a18      	ldr	r2, [pc, #96]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fa94 	bl	80010fc <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff fa90 	bl	80010fc <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e05f      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x47c>
 8001bf6:	e057      	b.n	8001ca8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fa7a 	bl	80010fc <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fa76 	bl	80010fc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e045      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_RCC_OscConfig+0x4d0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4b0>
 8001c2a:	e03d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x54c>
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_RCC_OscConfig+0x558>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d030      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d129      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d122      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d119      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10f      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0d0      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b67      	ldr	r3, [pc, #412]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 020f 	bic.w	r2, r3, #15
 8001ce6:	4965      	ldr	r1, [pc, #404]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b63      	ldr	r3, [pc, #396]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b59      	ldr	r3, [pc, #356]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b53      	ldr	r3, [pc, #332]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a52      	ldr	r2, [pc, #328]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b50      	ldr	r3, [pc, #320]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494d      	ldr	r1, [pc, #308]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d040      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e073      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06b      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4936      	ldr	r1, [pc, #216]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7ff f9a6 	bl	80010fc <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff f9a2 	bl	80010fc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e053      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2d      	ldr	r3, [pc, #180]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d210      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 020f 	bic.w	r2, r3, #15
 8001df2:	4922      	ldr	r1, [pc, #136]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e032      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4916      	ldr	r1, [pc, #88]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490e      	ldr	r1, [pc, #56]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 f821 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	490a      	ldr	r1, [pc, #40]	@ (8001e84 <HAL_RCC_ClockConfig+0x1cc>)
 8001e5c:	5ccb      	ldrb	r3, [r1, r3]
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <HAL_RCC_ClockConfig+0x1d0>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_RCC_ClockConfig+0x1d4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f902 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00
 8001e80:	40023800 	.word	0x40023800
 8001e84:	08004458 	.word	0x08004458
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e94:	b090      	sub	sp, #64	@ 0x40
 8001e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea8:	4b59      	ldr	r3, [pc, #356]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	f200 80a1 	bhi.w	8001ffc <HAL_RCC_GetSysClockFreq+0x16c>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x3a>
 8001ec2:	e09b      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec4:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ec8:	e09b      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eca:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ece:	e098      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ed8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001eda:	4b4d      	ldr	r3, [pc, #308]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x180>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d028      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	2200      	movs	r2, #0
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x188>)
 8001efc:	fb03 f201 	mul.w	r2, r3, r1
 8001f00:	2300      	movs	r3, #0
 8001f02:	fb00 f303 	mul.w	r3, r0, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	4a43      	ldr	r2, [pc, #268]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f10:	460a      	mov	r2, r1
 8001f12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f16:	4413      	add	r3, r2
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	61fa      	str	r2, [r7, #28]
 8001f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f2a:	f7fe f9e1 	bl	80002f0 <__aeabi_uldivmod>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4613      	mov	r3, r2
 8001f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f36:	e053      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f38:	4b35      	ldr	r3, [pc, #212]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	2200      	movs	r2, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	617a      	str	r2, [r7, #20]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f4a:	f04f 0b00 	mov.w	fp, #0
 8001f4e:	4652      	mov	r2, sl
 8001f50:	465b      	mov	r3, fp
 8001f52:	f04f 0000 	mov.w	r0, #0
 8001f56:	f04f 0100 	mov.w	r1, #0
 8001f5a:	0159      	lsls	r1, r3, #5
 8001f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f60:	0150      	lsls	r0, r2, #5
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	ebb2 080a 	subs.w	r8, r2, sl
 8001f6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f82:	ebb2 0408 	subs.w	r4, r2, r8
 8001f86:	eb63 0509 	sbc.w	r5, r3, r9
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	00eb      	lsls	r3, r5, #3
 8001f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f98:	00e2      	lsls	r2, r4, #3
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	eb14 030a 	adds.w	r3, r4, sl
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	eb45 030b 	adc.w	r3, r5, fp
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	028b      	lsls	r3, r1, #10
 8001fba:	4621      	mov	r1, r4
 8001fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	028a      	lsls	r2, r1, #10
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	60fa      	str	r2, [r7, #12]
 8001fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd4:	f7fe f98c 	bl	80002f0 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4613      	mov	r3, r2
 8001fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ff0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002004:	4618      	mov	r0, r3
 8002006:	3740      	adds	r7, #64	@ 0x40
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	00f42400 	.word	0x00f42400
 8002018:	017d7840 	.word	0x017d7840

0800201c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_RCC_GetHCLKFreq+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000000 	.word	0x20000000

08002034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002038:	f7ff fff0 	bl	800201c <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0a9b      	lsrs	r3, r3, #10
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	@ (8002058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	08004468 	.word	0x08004468

0800205c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002060:	f7ff ffdc 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0b5b      	lsrs	r3, r3, #13
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4903      	ldr	r1, [pc, #12]	@ (8002080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	08004468 	.word	0x08004468

08002084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e049      	b.n	800212a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe ff10 	bl	8000ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 fb7e 	bl	80027c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_TIM_PWM_Start+0x24>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e03c      	b.n	80021d2 <HAL_TIM_PWM_Start+0x9e>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b04      	cmp	r3, #4
 800215c:	d109      	bne.n	8002172 <HAL_TIM_PWM_Start+0x3e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	e02f      	b.n	80021d2 <HAL_TIM_PWM_Start+0x9e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d109      	bne.n	800218c <HAL_TIM_PWM_Start+0x58>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e022      	b.n	80021d2 <HAL_TIM_PWM_Start+0x9e>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d109      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x72>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e015      	b.n	80021d2 <HAL_TIM_PWM_Start+0x9e>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d109      	bne.n	80021c0 <HAL_TIM_PWM_Start+0x8c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e008      	b.n	80021d2 <HAL_TIM_PWM_Start+0x9e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e092      	b.n	8002300 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d104      	bne.n	80021ea <HAL_TIM_PWM_Start+0xb6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e8:	e023      	b.n	8002232 <HAL_TIM_PWM_Start+0xfe>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d104      	bne.n	80021fa <HAL_TIM_PWM_Start+0xc6>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f8:	e01b      	b.n	8002232 <HAL_TIM_PWM_Start+0xfe>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d104      	bne.n	800220a <HAL_TIM_PWM_Start+0xd6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002208:	e013      	b.n	8002232 <HAL_TIM_PWM_Start+0xfe>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d104      	bne.n	800221a <HAL_TIM_PWM_Start+0xe6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002218:	e00b      	b.n	8002232 <HAL_TIM_PWM_Start+0xfe>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b10      	cmp	r3, #16
 800221e:	d104      	bne.n	800222a <HAL_TIM_PWM_Start+0xf6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002228:	e003      	b.n	8002232 <HAL_TIM_PWM_Start+0xfe>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fdcc 	bl	8002dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a30      	ldr	r2, [pc, #192]	@ (8002308 <HAL_TIM_PWM_Start+0x1d4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_TIM_PWM_Start+0x120>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2f      	ldr	r2, [pc, #188]	@ (800230c <HAL_TIM_PWM_Start+0x1d8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_TIM_PWM_Start+0x124>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_TIM_PWM_Start+0x126>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a25      	ldr	r2, [pc, #148]	@ (8002308 <HAL_TIM_PWM_Start+0x1d4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <HAL_TIM_PWM_Start+0x18a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002280:	d01d      	beq.n	80022be <HAL_TIM_PWM_Start+0x18a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_TIM_PWM_Start+0x1dc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d018      	beq.n	80022be <HAL_TIM_PWM_Start+0x18a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a20      	ldr	r2, [pc, #128]	@ (8002314 <HAL_TIM_PWM_Start+0x1e0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_TIM_PWM_Start+0x18a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <HAL_TIM_PWM_Start+0x1e4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00e      	beq.n	80022be <HAL_TIM_PWM_Start+0x18a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a19      	ldr	r2, [pc, #100]	@ (800230c <HAL_TIM_PWM_Start+0x1d8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_TIM_PWM_Start+0x18a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_TIM_PWM_Start+0x1e8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_TIM_PWM_Start+0x18a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <HAL_TIM_PWM_Start+0x1ec>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <HAL_TIM_PWM_Start+0x1f0>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d015      	beq.n	80022fc <HAL_TIM_PWM_Start+0x1c8>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d6:	d011      	beq.n	80022fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e8:	e008      	b.n	80022fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e000      	b.n	80022fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40010000 	.word	0x40010000
 800230c:	40010400 	.word	0x40010400
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40014000 	.word	0x40014000
 8002320:	40001800 	.word	0x40001800
 8002324:	00010007 	.word	0x00010007

08002328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d020      	beq.n	800238c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0202 	mvn.w	r2, #2
 800235c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa08 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f9fa 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fa0b 	bl	800279c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d020      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0204 	mvn.w	r2, #4
 80023a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f9e2 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f9d4 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f9e5 	bl	800279c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0208 	mvn.w	r2, #8
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2204      	movs	r2, #4
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f9bc 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f9ae 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f9bf 	bl	800279c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d020      	beq.n	8002470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0210 	mvn.w	r2, #16
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2208      	movs	r2, #8
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f996 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f988 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f999 	bl	800279c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0201 	mvn.w	r2, #1
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f966 	bl	8002760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249a:	2b00      	cmp	r3, #0
 800249c:	d104      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80024ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fcba 	bl	8002e36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80024de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fcb2 	bl	8002e4a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00c      	beq.n	800250a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f953 	bl	80027b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00c      	beq.n	800252e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f06f 0220 	mvn.w	r2, #32
 8002526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fc7a 	bl	8002e22 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002552:	2302      	movs	r3, #2
 8002554:	e0ff      	b.n	8002756 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b14      	cmp	r3, #20
 8002562:	f200 80f0 	bhi.w	8002746 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002566:	a201      	add	r2, pc, #4	@ (adr r2, 800256c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	080025c1 	.word	0x080025c1
 8002570:	08002747 	.word	0x08002747
 8002574:	08002747 	.word	0x08002747
 8002578:	08002747 	.word	0x08002747
 800257c:	08002601 	.word	0x08002601
 8002580:	08002747 	.word	0x08002747
 8002584:	08002747 	.word	0x08002747
 8002588:	08002747 	.word	0x08002747
 800258c:	08002643 	.word	0x08002643
 8002590:	08002747 	.word	0x08002747
 8002594:	08002747 	.word	0x08002747
 8002598:	08002747 	.word	0x08002747
 800259c:	08002683 	.word	0x08002683
 80025a0:	08002747 	.word	0x08002747
 80025a4:	08002747 	.word	0x08002747
 80025a8:	08002747 	.word	0x08002747
 80025ac:	080026c5 	.word	0x080026c5
 80025b0:	08002747 	.word	0x08002747
 80025b4:	08002747 	.word	0x08002747
 80025b8:	08002747 	.word	0x08002747
 80025bc:	08002705 	.word	0x08002705
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f9a8 	bl	800291c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6999      	ldr	r1, [r3, #24]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]
      break;
 80025fe:	e0a5      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f9fa 	bl	8002a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800261a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6999      	ldr	r1, [r3, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
      break;
 8002640:	e084      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fa51 	bl	8002af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0208 	orr.w	r2, r2, #8
 800265c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0204 	bic.w	r2, r2, #4
 800266c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69d9      	ldr	r1, [r3, #28]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	61da      	str	r2, [r3, #28]
      break;
 8002680:	e064      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 faa7 	bl	8002bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69d9      	ldr	r1, [r3, #28]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	61da      	str	r2, [r3, #28]
      break;
 80026c2:	e043      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fade 	bl	8002c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0208 	orr.w	r2, r2, #8
 80026de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002702:	e023      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fb10 	bl	8002d30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800271e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	021a      	lsls	r2, r3, #8
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002744:	e002      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
      break;
 800274a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a46      	ldr	r2, [pc, #280]	@ (80028f0 <TIM_Base_SetConfig+0x12c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d013      	beq.n	8002804 <TIM_Base_SetConfig+0x40>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e2:	d00f      	beq.n	8002804 <TIM_Base_SetConfig+0x40>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a43      	ldr	r2, [pc, #268]	@ (80028f4 <TIM_Base_SetConfig+0x130>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00b      	beq.n	8002804 <TIM_Base_SetConfig+0x40>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a42      	ldr	r2, [pc, #264]	@ (80028f8 <TIM_Base_SetConfig+0x134>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <TIM_Base_SetConfig+0x40>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a41      	ldr	r2, [pc, #260]	@ (80028fc <TIM_Base_SetConfig+0x138>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0x40>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a40      	ldr	r2, [pc, #256]	@ (8002900 <TIM_Base_SetConfig+0x13c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d108      	bne.n	8002816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a35      	ldr	r2, [pc, #212]	@ (80028f0 <TIM_Base_SetConfig+0x12c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02b      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002824:	d027      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a32      	ldr	r2, [pc, #200]	@ (80028f4 <TIM_Base_SetConfig+0x130>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d023      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <TIM_Base_SetConfig+0x134>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01f      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <TIM_Base_SetConfig+0x138>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01b      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a2f      	ldr	r2, [pc, #188]	@ (8002900 <TIM_Base_SetConfig+0x13c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d017      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2e      	ldr	r2, [pc, #184]	@ (8002904 <TIM_Base_SetConfig+0x140>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2d      	ldr	r2, [pc, #180]	@ (8002908 <TIM_Base_SetConfig+0x144>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00f      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2c      	ldr	r2, [pc, #176]	@ (800290c <TIM_Base_SetConfig+0x148>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00b      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a2b      	ldr	r2, [pc, #172]	@ (8002910 <TIM_Base_SetConfig+0x14c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2a      	ldr	r2, [pc, #168]	@ (8002914 <TIM_Base_SetConfig+0x150>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a29      	ldr	r2, [pc, #164]	@ (8002918 <TIM_Base_SetConfig+0x154>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d108      	bne.n	8002888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a10      	ldr	r2, [pc, #64]	@ (80028f0 <TIM_Base_SetConfig+0x12c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d003      	beq.n	80028bc <TIM_Base_SetConfig+0xf8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <TIM_Base_SetConfig+0x13c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d103      	bne.n	80028c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f023 0201 	bic.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]
  }
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40010400 	.word	0x40010400
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800
 8002910:	40001800 	.word	0x40001800
 8002914:	40001c00 	.word	0x40001c00
 8002918:	40002000 	.word	0x40002000

0800291c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 0201 	bic.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <TIM_OC1_SetConfig+0xd8>)
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 0302 	bic.w	r3, r3, #2
 8002964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a21      	ldr	r2, [pc, #132]	@ (80029f8 <TIM_OC1_SetConfig+0xdc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC1_SetConfig+0x64>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a20      	ldr	r2, [pc, #128]	@ (80029fc <TIM_OC1_SetConfig+0xe0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10c      	bne.n	800299a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 0308 	bic.w	r3, r3, #8
 8002986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a16      	ldr	r2, [pc, #88]	@ (80029f8 <TIM_OC1_SetConfig+0xdc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_OC1_SetConfig+0x8e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <TIM_OC1_SetConfig+0xe0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d111      	bne.n	80029ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	621a      	str	r2, [r3, #32]
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	fffeff8f 	.word	0xfffeff8f
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40010400 	.word	0x40010400

08002a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 0210 	bic.w	r2, r3, #16
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae4 <TIM_OC2_SetConfig+0xe4>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f023 0320 	bic.w	r3, r3, #32
 8002a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a23      	ldr	r2, [pc, #140]	@ (8002ae8 <TIM_OC2_SetConfig+0xe8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_OC2_SetConfig+0x68>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <TIM_OC2_SetConfig+0xec>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10d      	bne.n	8002a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a18      	ldr	r2, [pc, #96]	@ (8002ae8 <TIM_OC2_SetConfig+0xe8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <TIM_OC2_SetConfig+0x94>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a17      	ldr	r2, [pc, #92]	@ (8002aec <TIM_OC2_SetConfig+0xec>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d113      	bne.n	8002abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	621a      	str	r2, [r3, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	feff8fff 	.word	0xfeff8fff
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40010400 	.word	0x40010400

08002af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd0 <TIM_OC3_SetConfig+0xe0>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a22      	ldr	r2, [pc, #136]	@ (8002bd4 <TIM_OC3_SetConfig+0xe4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <TIM_OC3_SetConfig+0x66>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <TIM_OC3_SetConfig+0xe8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10d      	bne.n	8002b72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a17      	ldr	r2, [pc, #92]	@ (8002bd4 <TIM_OC3_SetConfig+0xe4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_OC3_SetConfig+0x92>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a16      	ldr	r2, [pc, #88]	@ (8002bd8 <TIM_OC3_SetConfig+0xe8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d113      	bne.n	8002baa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	fffeff8f 	.word	0xfffeff8f
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40010400 	.word	0x40010400

08002bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <TIM_OC4_SetConfig+0xa4>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	031b      	lsls	r3, r3, #12
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <TIM_OC4_SetConfig+0xa8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC4_SetConfig+0x68>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <TIM_OC4_SetConfig+0xac>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d109      	bne.n	8002c58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	feff8fff 	.word	0xfeff8fff
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40010400 	.word	0x40010400

08002c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <TIM_OC5_SetConfig+0x98>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002ccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <TIM_OC5_SetConfig+0x9c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_OC5_SetConfig+0x5e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <TIM_OC5_SetConfig+0xa0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d109      	bne.n	8002cfe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	621a      	str	r2, [r3, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	fffeff8f 	.word	0xfffeff8f
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	40010400 	.word	0x40010400

08002d30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dcc <TIM_OC6_SetConfig+0x9c>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	051b      	lsls	r3, r3, #20
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a13      	ldr	r2, [pc, #76]	@ (8002dd0 <TIM_OC6_SetConfig+0xa0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_OC6_SetConfig+0x60>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a12      	ldr	r2, [pc, #72]	@ (8002dd4 <TIM_OC6_SetConfig+0xa4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d109      	bne.n	8002da4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	feff8fff 	.word	0xfeff8fff
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2201      	movs	r2, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e040      	b.n	8002ef2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fe f801 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2224      	movs	r2, #36	@ 0x24
 8002e8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb15 	bl	80034d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8ae 	bl	800300c <UART_SetConfig>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e01b      	b.n	8002ef2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fb94 	bl	8003618 <UART_CheckIdleState>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b08a      	sub	sp, #40	@ 0x28
 8002efe:	af02      	add	r7, sp, #8
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d177      	bne.n	8003002 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_UART_Transmit+0x24>
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e070      	b.n	8003004 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2221      	movs	r2, #33	@ 0x21
 8002f2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f30:	f7fe f8e4 	bl	80010fc <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4e:	d108      	bne.n	8002f62 <HAL_UART_Transmit+0x68>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e003      	b.n	8002f6a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f6a:	e02f      	b.n	8002fcc <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2180      	movs	r1, #128	@ 0x80
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fbf6 	bl	8003768 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e03b      	b.n	8003004 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	e007      	b.n	8002fba <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1c9      	bne.n	8002f6c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2140      	movs	r1, #64	@ 0x40
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fbc0 	bl	8003768 <UART_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e005      	b.n	8003004 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4ba6      	ldr	r3, [pc, #664]	@ (80032d0 <UART_SetConfig+0x2c4>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	430b      	orrs	r3, r1
 8003042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a94      	ldr	r2, [pc, #592]	@ (80032d4 <UART_SetConfig+0x2c8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d120      	bne.n	80030ca <UART_SetConfig+0xbe>
 8003088:	4b93      	ldr	r3, [pc, #588]	@ (80032d8 <UART_SetConfig+0x2cc>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b03      	cmp	r3, #3
 8003094:	d816      	bhi.n	80030c4 <UART_SetConfig+0xb8>
 8003096:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <UART_SetConfig+0x90>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030b3 	.word	0x080030b3
 80030a8:	080030bf 	.word	0x080030bf
 80030ac:	2301      	movs	r3, #1
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e150      	b.n	8003354 <UART_SetConfig+0x348>
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e14d      	b.n	8003354 <UART_SetConfig+0x348>
 80030b8:	2304      	movs	r3, #4
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e14a      	b.n	8003354 <UART_SetConfig+0x348>
 80030be:	2308      	movs	r3, #8
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e147      	b.n	8003354 <UART_SetConfig+0x348>
 80030c4:	2310      	movs	r3, #16
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e144      	b.n	8003354 <UART_SetConfig+0x348>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a83      	ldr	r2, [pc, #524]	@ (80032dc <UART_SetConfig+0x2d0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d132      	bne.n	800313a <UART_SetConfig+0x12e>
 80030d4:	4b80      	ldr	r3, [pc, #512]	@ (80032d8 <UART_SetConfig+0x2cc>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d828      	bhi.n	8003134 <UART_SetConfig+0x128>
 80030e2:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <UART_SetConfig+0xdc>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	08003135 	.word	0x08003135
 80030f0:	08003135 	.word	0x08003135
 80030f4:	08003135 	.word	0x08003135
 80030f8:	08003129 	.word	0x08003129
 80030fc:	08003135 	.word	0x08003135
 8003100:	08003135 	.word	0x08003135
 8003104:	08003135 	.word	0x08003135
 8003108:	08003123 	.word	0x08003123
 800310c:	08003135 	.word	0x08003135
 8003110:	08003135 	.word	0x08003135
 8003114:	08003135 	.word	0x08003135
 8003118:	0800312f 	.word	0x0800312f
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e118      	b.n	8003354 <UART_SetConfig+0x348>
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e115      	b.n	8003354 <UART_SetConfig+0x348>
 8003128:	2304      	movs	r3, #4
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e112      	b.n	8003354 <UART_SetConfig+0x348>
 800312e:	2308      	movs	r3, #8
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e10f      	b.n	8003354 <UART_SetConfig+0x348>
 8003134:	2310      	movs	r3, #16
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e10c      	b.n	8003354 <UART_SetConfig+0x348>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a68      	ldr	r2, [pc, #416]	@ (80032e0 <UART_SetConfig+0x2d4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d120      	bne.n	8003186 <UART_SetConfig+0x17a>
 8003144:	4b64      	ldr	r3, [pc, #400]	@ (80032d8 <UART_SetConfig+0x2cc>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800314e:	2b30      	cmp	r3, #48	@ 0x30
 8003150:	d013      	beq.n	800317a <UART_SetConfig+0x16e>
 8003152:	2b30      	cmp	r3, #48	@ 0x30
 8003154:	d814      	bhi.n	8003180 <UART_SetConfig+0x174>
 8003156:	2b20      	cmp	r3, #32
 8003158:	d009      	beq.n	800316e <UART_SetConfig+0x162>
 800315a:	2b20      	cmp	r3, #32
 800315c:	d810      	bhi.n	8003180 <UART_SetConfig+0x174>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <UART_SetConfig+0x15c>
 8003162:	2b10      	cmp	r3, #16
 8003164:	d006      	beq.n	8003174 <UART_SetConfig+0x168>
 8003166:	e00b      	b.n	8003180 <UART_SetConfig+0x174>
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e0f2      	b.n	8003354 <UART_SetConfig+0x348>
 800316e:	2302      	movs	r3, #2
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e0ef      	b.n	8003354 <UART_SetConfig+0x348>
 8003174:	2304      	movs	r3, #4
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e0ec      	b.n	8003354 <UART_SetConfig+0x348>
 800317a:	2308      	movs	r3, #8
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e0e9      	b.n	8003354 <UART_SetConfig+0x348>
 8003180:	2310      	movs	r3, #16
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e0e6      	b.n	8003354 <UART_SetConfig+0x348>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a56      	ldr	r2, [pc, #344]	@ (80032e4 <UART_SetConfig+0x2d8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d120      	bne.n	80031d2 <UART_SetConfig+0x1c6>
 8003190:	4b51      	ldr	r3, [pc, #324]	@ (80032d8 <UART_SetConfig+0x2cc>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800319a:	2bc0      	cmp	r3, #192	@ 0xc0
 800319c:	d013      	beq.n	80031c6 <UART_SetConfig+0x1ba>
 800319e:	2bc0      	cmp	r3, #192	@ 0xc0
 80031a0:	d814      	bhi.n	80031cc <UART_SetConfig+0x1c0>
 80031a2:	2b80      	cmp	r3, #128	@ 0x80
 80031a4:	d009      	beq.n	80031ba <UART_SetConfig+0x1ae>
 80031a6:	2b80      	cmp	r3, #128	@ 0x80
 80031a8:	d810      	bhi.n	80031cc <UART_SetConfig+0x1c0>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <UART_SetConfig+0x1a8>
 80031ae:	2b40      	cmp	r3, #64	@ 0x40
 80031b0:	d006      	beq.n	80031c0 <UART_SetConfig+0x1b4>
 80031b2:	e00b      	b.n	80031cc <UART_SetConfig+0x1c0>
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e0cc      	b.n	8003354 <UART_SetConfig+0x348>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e0c9      	b.n	8003354 <UART_SetConfig+0x348>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e0c6      	b.n	8003354 <UART_SetConfig+0x348>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e0c3      	b.n	8003354 <UART_SetConfig+0x348>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e0c0      	b.n	8003354 <UART_SetConfig+0x348>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a44      	ldr	r2, [pc, #272]	@ (80032e8 <UART_SetConfig+0x2dc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d125      	bne.n	8003228 <UART_SetConfig+0x21c>
 80031dc:	4b3e      	ldr	r3, [pc, #248]	@ (80032d8 <UART_SetConfig+0x2cc>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ea:	d017      	beq.n	800321c <UART_SetConfig+0x210>
 80031ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031f0:	d817      	bhi.n	8003222 <UART_SetConfig+0x216>
 80031f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f6:	d00b      	beq.n	8003210 <UART_SetConfig+0x204>
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031fc:	d811      	bhi.n	8003222 <UART_SetConfig+0x216>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <UART_SetConfig+0x1fe>
 8003202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003206:	d006      	beq.n	8003216 <UART_SetConfig+0x20a>
 8003208:	e00b      	b.n	8003222 <UART_SetConfig+0x216>
 800320a:	2300      	movs	r3, #0
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e0a1      	b.n	8003354 <UART_SetConfig+0x348>
 8003210:	2302      	movs	r3, #2
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e09e      	b.n	8003354 <UART_SetConfig+0x348>
 8003216:	2304      	movs	r3, #4
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e09b      	b.n	8003354 <UART_SetConfig+0x348>
 800321c:	2308      	movs	r3, #8
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e098      	b.n	8003354 <UART_SetConfig+0x348>
 8003222:	2310      	movs	r3, #16
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e095      	b.n	8003354 <UART_SetConfig+0x348>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2f      	ldr	r2, [pc, #188]	@ (80032ec <UART_SetConfig+0x2e0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d125      	bne.n	800327e <UART_SetConfig+0x272>
 8003232:	4b29      	ldr	r3, [pc, #164]	@ (80032d8 <UART_SetConfig+0x2cc>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800323c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003240:	d017      	beq.n	8003272 <UART_SetConfig+0x266>
 8003242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003246:	d817      	bhi.n	8003278 <UART_SetConfig+0x26c>
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800324c:	d00b      	beq.n	8003266 <UART_SetConfig+0x25a>
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003252:	d811      	bhi.n	8003278 <UART_SetConfig+0x26c>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <UART_SetConfig+0x254>
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	d006      	beq.n	800326c <UART_SetConfig+0x260>
 800325e:	e00b      	b.n	8003278 <UART_SetConfig+0x26c>
 8003260:	2301      	movs	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e076      	b.n	8003354 <UART_SetConfig+0x348>
 8003266:	2302      	movs	r3, #2
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e073      	b.n	8003354 <UART_SetConfig+0x348>
 800326c:	2304      	movs	r3, #4
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e070      	b.n	8003354 <UART_SetConfig+0x348>
 8003272:	2308      	movs	r3, #8
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e06d      	b.n	8003354 <UART_SetConfig+0x348>
 8003278:	2310      	movs	r3, #16
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e06a      	b.n	8003354 <UART_SetConfig+0x348>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1b      	ldr	r2, [pc, #108]	@ (80032f0 <UART_SetConfig+0x2e4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d138      	bne.n	80032fa <UART_SetConfig+0x2ee>
 8003288:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <UART_SetConfig+0x2cc>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003292:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003296:	d017      	beq.n	80032c8 <UART_SetConfig+0x2bc>
 8003298:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800329c:	d82a      	bhi.n	80032f4 <UART_SetConfig+0x2e8>
 800329e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a2:	d00b      	beq.n	80032bc <UART_SetConfig+0x2b0>
 80032a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a8:	d824      	bhi.n	80032f4 <UART_SetConfig+0x2e8>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <UART_SetConfig+0x2aa>
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b2:	d006      	beq.n	80032c2 <UART_SetConfig+0x2b6>
 80032b4:	e01e      	b.n	80032f4 <UART_SetConfig+0x2e8>
 80032b6:	2300      	movs	r3, #0
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e04b      	b.n	8003354 <UART_SetConfig+0x348>
 80032bc:	2302      	movs	r3, #2
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e048      	b.n	8003354 <UART_SetConfig+0x348>
 80032c2:	2304      	movs	r3, #4
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e045      	b.n	8003354 <UART_SetConfig+0x348>
 80032c8:	2308      	movs	r3, #8
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e042      	b.n	8003354 <UART_SetConfig+0x348>
 80032ce:	bf00      	nop
 80032d0:	efff69f3 	.word	0xefff69f3
 80032d4:	40011000 	.word	0x40011000
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40004400 	.word	0x40004400
 80032e0:	40004800 	.word	0x40004800
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	40005000 	.word	0x40005000
 80032ec:	40011400 	.word	0x40011400
 80032f0:	40007800 	.word	0x40007800
 80032f4:	2310      	movs	r3, #16
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e02c      	b.n	8003354 <UART_SetConfig+0x348>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a72      	ldr	r2, [pc, #456]	@ (80034c8 <UART_SetConfig+0x4bc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d125      	bne.n	8003350 <UART_SetConfig+0x344>
 8003304:	4b71      	ldr	r3, [pc, #452]	@ (80034cc <UART_SetConfig+0x4c0>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800330e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003312:	d017      	beq.n	8003344 <UART_SetConfig+0x338>
 8003314:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003318:	d817      	bhi.n	800334a <UART_SetConfig+0x33e>
 800331a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331e:	d00b      	beq.n	8003338 <UART_SetConfig+0x32c>
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003324:	d811      	bhi.n	800334a <UART_SetConfig+0x33e>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <UART_SetConfig+0x326>
 800332a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800332e:	d006      	beq.n	800333e <UART_SetConfig+0x332>
 8003330:	e00b      	b.n	800334a <UART_SetConfig+0x33e>
 8003332:	2300      	movs	r3, #0
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e00d      	b.n	8003354 <UART_SetConfig+0x348>
 8003338:	2302      	movs	r3, #2
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e00a      	b.n	8003354 <UART_SetConfig+0x348>
 800333e:	2304      	movs	r3, #4
 8003340:	77fb      	strb	r3, [r7, #31]
 8003342:	e007      	b.n	8003354 <UART_SetConfig+0x348>
 8003344:	2308      	movs	r3, #8
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e004      	b.n	8003354 <UART_SetConfig+0x348>
 800334a:	2310      	movs	r3, #16
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e001      	b.n	8003354 <UART_SetConfig+0x348>
 8003350:	2310      	movs	r3, #16
 8003352:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335c:	d15b      	bne.n	8003416 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d828      	bhi.n	80033b6 <UART_SetConfig+0x3aa>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <UART_SetConfig+0x360>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003391 	.word	0x08003391
 8003370:	08003399 	.word	0x08003399
 8003374:	080033a1 	.word	0x080033a1
 8003378:	080033b7 	.word	0x080033b7
 800337c:	080033a7 	.word	0x080033a7
 8003380:	080033b7 	.word	0x080033b7
 8003384:	080033b7 	.word	0x080033b7
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033af 	.word	0x080033af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7fe fe50 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8003394:	61b8      	str	r0, [r7, #24]
        break;
 8003396:	e013      	b.n	80033c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003398:	f7fe fe60 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 800339c:	61b8      	str	r0, [r7, #24]
        break;
 800339e:	e00f      	b.n	80033c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a0:	4b4b      	ldr	r3, [pc, #300]	@ (80034d0 <UART_SetConfig+0x4c4>)
 80033a2:	61bb      	str	r3, [r7, #24]
        break;
 80033a4:	e00c      	b.n	80033c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a6:	f7fe fd73 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 80033aa:	61b8      	str	r0, [r7, #24]
        break;
 80033ac:	e008      	b.n	80033c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b2:	61bb      	str	r3, [r7, #24]
        break;
 80033b4:	e004      	b.n	80033c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	77bb      	strb	r3, [r7, #30]
        break;
 80033be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d074      	beq.n	80034b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	005a      	lsls	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	441a      	add	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	d916      	bls.n	8003410 <UART_SetConfig+0x404>
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e8:	d212      	bcs.n	8003410 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f023 030f 	bic.w	r3, r3, #15
 80033f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	b29a      	uxth	r2, r3
 8003400:	89fb      	ldrh	r3, [r7, #14]
 8003402:	4313      	orrs	r3, r2
 8003404:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	89fa      	ldrh	r2, [r7, #14]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e04f      	b.n	80034b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	77bb      	strb	r3, [r7, #30]
 8003414:	e04c      	b.n	80034b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003416:	7ffb      	ldrb	r3, [r7, #31]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d828      	bhi.n	800346e <UART_SetConfig+0x462>
 800341c:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <UART_SetConfig+0x418>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003449 	.word	0x08003449
 8003428:	08003451 	.word	0x08003451
 800342c:	08003459 	.word	0x08003459
 8003430:	0800346f 	.word	0x0800346f
 8003434:	0800345f 	.word	0x0800345f
 8003438:	0800346f 	.word	0x0800346f
 800343c:	0800346f 	.word	0x0800346f
 8003440:	0800346f 	.word	0x0800346f
 8003444:	08003467 	.word	0x08003467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003448:	f7fe fdf4 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 800344c:	61b8      	str	r0, [r7, #24]
        break;
 800344e:	e013      	b.n	8003478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7fe fe04 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 8003454:	61b8      	str	r0, [r7, #24]
        break;
 8003456:	e00f      	b.n	8003478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003458:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <UART_SetConfig+0x4c4>)
 800345a:	61bb      	str	r3, [r7, #24]
        break;
 800345c:	e00c      	b.n	8003478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345e:	f7fe fd17 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8003462:	61b8      	str	r0, [r7, #24]
        break;
 8003464:	e008      	b.n	8003478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800346a:	61bb      	str	r3, [r7, #24]
        break;
 800346c:	e004      	b.n	8003478 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	77bb      	strb	r3, [r7, #30]
        break;
 8003476:	bf00      	nop
    }

    if (pclk != 0U)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d018      	beq.n	80034b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	085a      	lsrs	r2, r3, #1
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	441a      	add	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b0f      	cmp	r3, #15
 8003496:	d909      	bls.n	80034ac <UART_SetConfig+0x4a0>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349e:	d205      	bcs.n	80034ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	e001      	b.n	80034b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40007c00 	.word	0x40007c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	00f42400 	.word	0x00f42400

080034d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01a      	beq.n	80035ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d2:	d10a      	bne.n	80035ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b098      	sub	sp, #96	@ 0x60
 800361c:	af02      	add	r7, sp, #8
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003628:	f7fd fd68 	bl	80010fc <HAL_GetTick>
 800362c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b08      	cmp	r3, #8
 800363a:	d12e      	bne.n	800369a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800363c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003644:	2200      	movs	r2, #0
 8003646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f88c 	bl	8003768 <UART_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d021      	beq.n	800369a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800366a:	653b      	str	r3, [r7, #80]	@ 0x50
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003674:	647b      	str	r3, [r7, #68]	@ 0x44
 8003676:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800367a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e6      	bne.n	8003656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e062      	b.n	8003760 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d149      	bne.n	800373c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b0:	2200      	movs	r2, #0
 80036b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f856 	bl	8003768 <UART_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03c      	beq.n	800373c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	623b      	str	r3, [r7, #32]
   return(result);
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e6      	bne.n	80036c2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3308      	adds	r3, #8
 80036fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	60fb      	str	r3, [r7, #12]
   return(result);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3308      	adds	r3, #8
 8003712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003714:	61fa      	str	r2, [r7, #28]
 8003716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	69b9      	ldr	r1, [r7, #24]
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	617b      	str	r3, [r7, #20]
   return(result);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e5      	bne.n	80036f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e011      	b.n	8003760 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3758      	adds	r7, #88	@ 0x58
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003778:	e04f      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003780:	d04b      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7fd fcbb 	bl	80010fc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <UART_WaitOnFlagUntilTimeout+0x30>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e04e      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d037      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b80      	cmp	r3, #128	@ 0x80
 80037ae:	d034      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b40      	cmp	r3, #64	@ 0x40
 80037b4:	d031      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d110      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2208      	movs	r2, #8
 80037ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f838 	bl	8003842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2208      	movs	r2, #8
 80037d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e029      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f4:	d111      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f81e 	bl	8003842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e00f      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	429a      	cmp	r2, r3
 8003836:	d0a0      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003842:	b480      	push	{r7}
 8003844:	b095      	sub	sp, #84	@ 0x54
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003868:	643b      	str	r3, [r7, #64]	@ 0x40
 800386a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800386e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e6      	bne.n	800384a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3308      	adds	r3, #8
 8003882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	61fb      	str	r3, [r7, #28]
   return(result);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3308      	adds	r3, #8
 800389a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800389c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d118      	bne.n	80038ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f023 0310 	bic.w	r3, r3, #16
 80038cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	613b      	str	r3, [r7, #16]
   return(result);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e6      	bne.n	80038b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038fe:	bf00      	nop
 8003900:	3754      	adds	r7, #84	@ 0x54
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <siprintf>:
 800390c:	b40e      	push	{r1, r2, r3}
 800390e:	b500      	push	{lr}
 8003910:	b09c      	sub	sp, #112	@ 0x70
 8003912:	ab1d      	add	r3, sp, #116	@ 0x74
 8003914:	9002      	str	r0, [sp, #8]
 8003916:	9006      	str	r0, [sp, #24]
 8003918:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800391c:	4809      	ldr	r0, [pc, #36]	@ (8003944 <siprintf+0x38>)
 800391e:	9107      	str	r1, [sp, #28]
 8003920:	9104      	str	r1, [sp, #16]
 8003922:	4909      	ldr	r1, [pc, #36]	@ (8003948 <siprintf+0x3c>)
 8003924:	f853 2b04 	ldr.w	r2, [r3], #4
 8003928:	9105      	str	r1, [sp, #20]
 800392a:	6800      	ldr	r0, [r0, #0]
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	a902      	add	r1, sp, #8
 8003930:	f000 f98e 	bl	8003c50 <_svfiprintf_r>
 8003934:	9b02      	ldr	r3, [sp, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	b01c      	add	sp, #112	@ 0x70
 800393c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003940:	b003      	add	sp, #12
 8003942:	4770      	bx	lr
 8003944:	2000000c 	.word	0x2000000c
 8003948:	ffff0208 	.word	0xffff0208

0800394c <memset>:
 800394c:	4402      	add	r2, r0
 800394e:	4603      	mov	r3, r0
 8003950:	4293      	cmp	r3, r2
 8003952:	d100      	bne.n	8003956 <memset+0xa>
 8003954:	4770      	bx	lr
 8003956:	f803 1b01 	strb.w	r1, [r3], #1
 800395a:	e7f9      	b.n	8003950 <memset+0x4>

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4d0d      	ldr	r5, [pc, #52]	@ (8003994 <__libc_init_array+0x38>)
 8003960:	4c0d      	ldr	r4, [pc, #52]	@ (8003998 <__libc_init_array+0x3c>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2600      	movs	r6, #0
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	4d0b      	ldr	r5, [pc, #44]	@ (800399c <__libc_init_array+0x40>)
 800396e:	4c0c      	ldr	r4, [pc, #48]	@ (80039a0 <__libc_init_array+0x44>)
 8003970:	f000 fc74 	bl	800425c <_init>
 8003974:	1b64      	subs	r4, r4, r5
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	2600      	movs	r6, #0
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	080044ac 	.word	0x080044ac
 8003998:	080044ac 	.word	0x080044ac
 800399c:	080044ac 	.word	0x080044ac
 80039a0:	080044b0 	.word	0x080044b0

080039a4 <__retarget_lock_acquire_recursive>:
 80039a4:	4770      	bx	lr

080039a6 <__retarget_lock_release_recursive>:
 80039a6:	4770      	bx	lr

080039a8 <_free_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4605      	mov	r5, r0
 80039ac:	2900      	cmp	r1, #0
 80039ae:	d041      	beq.n	8003a34 <_free_r+0x8c>
 80039b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b4:	1f0c      	subs	r4, r1, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bfb8      	it	lt
 80039ba:	18e4      	addlt	r4, r4, r3
 80039bc:	f000 f8e0 	bl	8003b80 <__malloc_lock>
 80039c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a38 <_free_r+0x90>)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	b933      	cbnz	r3, 80039d4 <_free_r+0x2c>
 80039c6:	6063      	str	r3, [r4, #4]
 80039c8:	6014      	str	r4, [r2, #0]
 80039ca:	4628      	mov	r0, r5
 80039cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d0:	f000 b8dc 	b.w	8003b8c <__malloc_unlock>
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	d908      	bls.n	80039ea <_free_r+0x42>
 80039d8:	6820      	ldr	r0, [r4, #0]
 80039da:	1821      	adds	r1, r4, r0
 80039dc:	428b      	cmp	r3, r1
 80039de:	bf01      	itttt	eq
 80039e0:	6819      	ldreq	r1, [r3, #0]
 80039e2:	685b      	ldreq	r3, [r3, #4]
 80039e4:	1809      	addeq	r1, r1, r0
 80039e6:	6021      	streq	r1, [r4, #0]
 80039e8:	e7ed      	b.n	80039c6 <_free_r+0x1e>
 80039ea:	461a      	mov	r2, r3
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	b10b      	cbz	r3, 80039f4 <_free_r+0x4c>
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d9fa      	bls.n	80039ea <_free_r+0x42>
 80039f4:	6811      	ldr	r1, [r2, #0]
 80039f6:	1850      	adds	r0, r2, r1
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d10b      	bne.n	8003a14 <_free_r+0x6c>
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	4401      	add	r1, r0
 8003a00:	1850      	adds	r0, r2, r1
 8003a02:	4283      	cmp	r3, r0
 8003a04:	6011      	str	r1, [r2, #0]
 8003a06:	d1e0      	bne.n	80039ca <_free_r+0x22>
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	6053      	str	r3, [r2, #4]
 8003a0e:	4408      	add	r0, r1
 8003a10:	6010      	str	r0, [r2, #0]
 8003a12:	e7da      	b.n	80039ca <_free_r+0x22>
 8003a14:	d902      	bls.n	8003a1c <_free_r+0x74>
 8003a16:	230c      	movs	r3, #12
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	e7d6      	b.n	80039ca <_free_r+0x22>
 8003a1c:	6820      	ldr	r0, [r4, #0]
 8003a1e:	1821      	adds	r1, r4, r0
 8003a20:	428b      	cmp	r3, r1
 8003a22:	bf04      	itt	eq
 8003a24:	6819      	ldreq	r1, [r3, #0]
 8003a26:	685b      	ldreq	r3, [r3, #4]
 8003a28:	6063      	str	r3, [r4, #4]
 8003a2a:	bf04      	itt	eq
 8003a2c:	1809      	addeq	r1, r1, r0
 8003a2e:	6021      	streq	r1, [r4, #0]
 8003a30:	6054      	str	r4, [r2, #4]
 8003a32:	e7ca      	b.n	80039ca <_free_r+0x22>
 8003a34:	bd38      	pop	{r3, r4, r5, pc}
 8003a36:	bf00      	nop
 8003a38:	20000428 	.word	0x20000428

08003a3c <sbrk_aligned>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8003a7c <sbrk_aligned+0x40>)
 8003a40:	460c      	mov	r4, r1
 8003a42:	6831      	ldr	r1, [r6, #0]
 8003a44:	4605      	mov	r5, r0
 8003a46:	b911      	cbnz	r1, 8003a4e <sbrk_aligned+0x12>
 8003a48:	f000 fba6 	bl	8004198 <_sbrk_r>
 8003a4c:	6030      	str	r0, [r6, #0]
 8003a4e:	4621      	mov	r1, r4
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 fba1 	bl	8004198 <_sbrk_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d103      	bne.n	8003a62 <sbrk_aligned+0x26>
 8003a5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003a5e:	4620      	mov	r0, r4
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
 8003a62:	1cc4      	adds	r4, r0, #3
 8003a64:	f024 0403 	bic.w	r4, r4, #3
 8003a68:	42a0      	cmp	r0, r4
 8003a6a:	d0f8      	beq.n	8003a5e <sbrk_aligned+0x22>
 8003a6c:	1a21      	subs	r1, r4, r0
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 fb92 	bl	8004198 <_sbrk_r>
 8003a74:	3001      	adds	r0, #1
 8003a76:	d1f2      	bne.n	8003a5e <sbrk_aligned+0x22>
 8003a78:	e7ef      	b.n	8003a5a <sbrk_aligned+0x1e>
 8003a7a:	bf00      	nop
 8003a7c:	20000424 	.word	0x20000424

08003a80 <_malloc_r>:
 8003a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a84:	1ccd      	adds	r5, r1, #3
 8003a86:	f025 0503 	bic.w	r5, r5, #3
 8003a8a:	3508      	adds	r5, #8
 8003a8c:	2d0c      	cmp	r5, #12
 8003a8e:	bf38      	it	cc
 8003a90:	250c      	movcc	r5, #12
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	4606      	mov	r6, r0
 8003a96:	db01      	blt.n	8003a9c <_malloc_r+0x1c>
 8003a98:	42a9      	cmp	r1, r5
 8003a9a:	d904      	bls.n	8003aa6 <_malloc_r+0x26>
 8003a9c:	230c      	movs	r3, #12
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b7c <_malloc_r+0xfc>
 8003aaa:	f000 f869 	bl	8003b80 <__malloc_lock>
 8003aae:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	bb44      	cbnz	r4, 8003b08 <_malloc_r+0x88>
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f7ff ffbf 	bl	8003a3c <sbrk_aligned>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	d158      	bne.n	8003b76 <_malloc_r+0xf6>
 8003ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8003ac8:	4627      	mov	r7, r4
 8003aca:	2f00      	cmp	r7, #0
 8003acc:	d143      	bne.n	8003b56 <_malloc_r+0xd6>
 8003ace:	2c00      	cmp	r4, #0
 8003ad0:	d04b      	beq.n	8003b6a <_malloc_r+0xea>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	4639      	mov	r1, r7
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	eb04 0903 	add.w	r9, r4, r3
 8003adc:	f000 fb5c 	bl	8004198 <_sbrk_r>
 8003ae0:	4581      	cmp	r9, r0
 8003ae2:	d142      	bne.n	8003b6a <_malloc_r+0xea>
 8003ae4:	6821      	ldr	r1, [r4, #0]
 8003ae6:	1a6d      	subs	r5, r5, r1
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4630      	mov	r0, r6
 8003aec:	f7ff ffa6 	bl	8003a3c <sbrk_aligned>
 8003af0:	3001      	adds	r0, #1
 8003af2:	d03a      	beq.n	8003b6a <_malloc_r+0xea>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	442b      	add	r3, r5
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	f8d8 3000 	ldr.w	r3, [r8]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	bb62      	cbnz	r2, 8003b5c <_malloc_r+0xdc>
 8003b02:	f8c8 7000 	str.w	r7, [r8]
 8003b06:	e00f      	b.n	8003b28 <_malloc_r+0xa8>
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	1b52      	subs	r2, r2, r5
 8003b0c:	d420      	bmi.n	8003b50 <_malloc_r+0xd0>
 8003b0e:	2a0b      	cmp	r2, #11
 8003b10:	d917      	bls.n	8003b42 <_malloc_r+0xc2>
 8003b12:	1961      	adds	r1, r4, r5
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	6025      	str	r5, [r4, #0]
 8003b18:	bf18      	it	ne
 8003b1a:	6059      	strne	r1, [r3, #4]
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	bf08      	it	eq
 8003b20:	f8c8 1000 	streq.w	r1, [r8]
 8003b24:	5162      	str	r2, [r4, r5]
 8003b26:	604b      	str	r3, [r1, #4]
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 f82f 	bl	8003b8c <__malloc_unlock>
 8003b2e:	f104 000b 	add.w	r0, r4, #11
 8003b32:	1d23      	adds	r3, r4, #4
 8003b34:	f020 0007 	bic.w	r0, r0, #7
 8003b38:	1ac2      	subs	r2, r0, r3
 8003b3a:	bf1c      	itt	ne
 8003b3c:	1a1b      	subne	r3, r3, r0
 8003b3e:	50a3      	strne	r3, [r4, r2]
 8003b40:	e7af      	b.n	8003aa2 <_malloc_r+0x22>
 8003b42:	6862      	ldr	r2, [r4, #4]
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	bf0c      	ite	eq
 8003b48:	f8c8 2000 	streq.w	r2, [r8]
 8003b4c:	605a      	strne	r2, [r3, #4]
 8003b4e:	e7eb      	b.n	8003b28 <_malloc_r+0xa8>
 8003b50:	4623      	mov	r3, r4
 8003b52:	6864      	ldr	r4, [r4, #4]
 8003b54:	e7ae      	b.n	8003ab4 <_malloc_r+0x34>
 8003b56:	463c      	mov	r4, r7
 8003b58:	687f      	ldr	r7, [r7, #4]
 8003b5a:	e7b6      	b.n	8003aca <_malloc_r+0x4a>
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	d1fb      	bne.n	8003b5c <_malloc_r+0xdc>
 8003b64:	2300      	movs	r3, #0
 8003b66:	6053      	str	r3, [r2, #4]
 8003b68:	e7de      	b.n	8003b28 <_malloc_r+0xa8>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f000 f80c 	bl	8003b8c <__malloc_unlock>
 8003b74:	e794      	b.n	8003aa0 <_malloc_r+0x20>
 8003b76:	6005      	str	r5, [r0, #0]
 8003b78:	e7d6      	b.n	8003b28 <_malloc_r+0xa8>
 8003b7a:	bf00      	nop
 8003b7c:	20000428 	.word	0x20000428

08003b80 <__malloc_lock>:
 8003b80:	4801      	ldr	r0, [pc, #4]	@ (8003b88 <__malloc_lock+0x8>)
 8003b82:	f7ff bf0f 	b.w	80039a4 <__retarget_lock_acquire_recursive>
 8003b86:	bf00      	nop
 8003b88:	20000420 	.word	0x20000420

08003b8c <__malloc_unlock>:
 8003b8c:	4801      	ldr	r0, [pc, #4]	@ (8003b94 <__malloc_unlock+0x8>)
 8003b8e:	f7ff bf0a 	b.w	80039a6 <__retarget_lock_release_recursive>
 8003b92:	bf00      	nop
 8003b94:	20000420 	.word	0x20000420

08003b98 <__ssputs_r>:
 8003b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b9c:	688e      	ldr	r6, [r1, #8]
 8003b9e:	461f      	mov	r7, r3
 8003ba0:	42be      	cmp	r6, r7
 8003ba2:	680b      	ldr	r3, [r1, #0]
 8003ba4:	4682      	mov	sl, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4690      	mov	r8, r2
 8003baa:	d82d      	bhi.n	8003c08 <__ssputs_r+0x70>
 8003bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bb4:	d026      	beq.n	8003c04 <__ssputs_r+0x6c>
 8003bb6:	6965      	ldr	r5, [r4, #20]
 8003bb8:	6909      	ldr	r1, [r1, #16]
 8003bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bbe:	eba3 0901 	sub.w	r9, r3, r1
 8003bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bc6:	1c7b      	adds	r3, r7, #1
 8003bc8:	444b      	add	r3, r9
 8003bca:	106d      	asrs	r5, r5, #1
 8003bcc:	429d      	cmp	r5, r3
 8003bce:	bf38      	it	cc
 8003bd0:	461d      	movcc	r5, r3
 8003bd2:	0553      	lsls	r3, r2, #21
 8003bd4:	d527      	bpl.n	8003c26 <__ssputs_r+0x8e>
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f7ff ff52 	bl	8003a80 <_malloc_r>
 8003bdc:	4606      	mov	r6, r0
 8003bde:	b360      	cbz	r0, 8003c3a <__ssputs_r+0xa2>
 8003be0:	6921      	ldr	r1, [r4, #16]
 8003be2:	464a      	mov	r2, r9
 8003be4:	f000 fae8 	bl	80041b8 <memcpy>
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	6126      	str	r6, [r4, #16]
 8003bf6:	6165      	str	r5, [r4, #20]
 8003bf8:	444e      	add	r6, r9
 8003bfa:	eba5 0509 	sub.w	r5, r5, r9
 8003bfe:	6026      	str	r6, [r4, #0]
 8003c00:	60a5      	str	r5, [r4, #8]
 8003c02:	463e      	mov	r6, r7
 8003c04:	42be      	cmp	r6, r7
 8003c06:	d900      	bls.n	8003c0a <__ssputs_r+0x72>
 8003c08:	463e      	mov	r6, r7
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	4641      	mov	r1, r8
 8003c10:	f000 faa8 	bl	8004164 <memmove>
 8003c14:	68a3      	ldr	r3, [r4, #8]
 8003c16:	1b9b      	subs	r3, r3, r6
 8003c18:	60a3      	str	r3, [r4, #8]
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	4433      	add	r3, r6
 8003c1e:	6023      	str	r3, [r4, #0]
 8003c20:	2000      	movs	r0, #0
 8003c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c26:	462a      	mov	r2, r5
 8003c28:	f000 fad4 	bl	80041d4 <_realloc_r>
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d1e0      	bne.n	8003bf4 <__ssputs_r+0x5c>
 8003c32:	6921      	ldr	r1, [r4, #16]
 8003c34:	4650      	mov	r0, sl
 8003c36:	f7ff feb7 	bl	80039a8 <_free_r>
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	f8ca 3000 	str.w	r3, [sl]
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c46:	81a3      	strh	r3, [r4, #12]
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c4c:	e7e9      	b.n	8003c22 <__ssputs_r+0x8a>
	...

08003c50 <_svfiprintf_r>:
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	4698      	mov	r8, r3
 8003c56:	898b      	ldrh	r3, [r1, #12]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	b09d      	sub	sp, #116	@ 0x74
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	460d      	mov	r5, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	d510      	bpl.n	8003c86 <_svfiprintf_r+0x36>
 8003c64:	690b      	ldr	r3, [r1, #16]
 8003c66:	b973      	cbnz	r3, 8003c86 <_svfiprintf_r+0x36>
 8003c68:	2140      	movs	r1, #64	@ 0x40
 8003c6a:	f7ff ff09 	bl	8003a80 <_malloc_r>
 8003c6e:	6028      	str	r0, [r5, #0]
 8003c70:	6128      	str	r0, [r5, #16]
 8003c72:	b930      	cbnz	r0, 8003c82 <_svfiprintf_r+0x32>
 8003c74:	230c      	movs	r3, #12
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c7c:	b01d      	add	sp, #116	@ 0x74
 8003c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c82:	2340      	movs	r3, #64	@ 0x40
 8003c84:	616b      	str	r3, [r5, #20]
 8003c86:	2300      	movs	r3, #0
 8003c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c94:	2330      	movs	r3, #48	@ 0x30
 8003c96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e34 <_svfiprintf_r+0x1e4>
 8003c9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c9e:	f04f 0901 	mov.w	r9, #1
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003caa:	b10a      	cbz	r2, 8003cb0 <_svfiprintf_r+0x60>
 8003cac:	2a25      	cmp	r2, #37	@ 0x25
 8003cae:	d1f9      	bne.n	8003ca4 <_svfiprintf_r+0x54>
 8003cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003cb4:	d00b      	beq.n	8003cce <_svfiprintf_r+0x7e>
 8003cb6:	465b      	mov	r3, fp
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	f7ff ff6b 	bl	8003b98 <__ssputs_r>
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	f000 80a7 	beq.w	8003e16 <_svfiprintf_r+0x1c6>
 8003cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cca:	445a      	add	r2, fp
 8003ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cce:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 809f 	beq.w	8003e16 <_svfiprintf_r+0x1c6>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ce2:	f10a 0a01 	add.w	sl, sl, #1
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	9307      	str	r3, [sp, #28]
 8003cea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cf0:	4654      	mov	r4, sl
 8003cf2:	2205      	movs	r2, #5
 8003cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf8:	484e      	ldr	r0, [pc, #312]	@ (8003e34 <_svfiprintf_r+0x1e4>)
 8003cfa:	f7fc faa9 	bl	8000250 <memchr>
 8003cfe:	9a04      	ldr	r2, [sp, #16]
 8003d00:	b9d8      	cbnz	r0, 8003d3a <_svfiprintf_r+0xea>
 8003d02:	06d0      	lsls	r0, r2, #27
 8003d04:	bf44      	itt	mi
 8003d06:	2320      	movmi	r3, #32
 8003d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d0c:	0711      	lsls	r1, r2, #28
 8003d0e:	bf44      	itt	mi
 8003d10:	232b      	movmi	r3, #43	@ 0x2b
 8003d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d16:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d1c:	d015      	beq.n	8003d4a <_svfiprintf_r+0xfa>
 8003d1e:	9a07      	ldr	r2, [sp, #28]
 8003d20:	4654      	mov	r4, sl
 8003d22:	2000      	movs	r0, #0
 8003d24:	f04f 0c0a 	mov.w	ip, #10
 8003d28:	4621      	mov	r1, r4
 8003d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d2e:	3b30      	subs	r3, #48	@ 0x30
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d94b      	bls.n	8003dcc <_svfiprintf_r+0x17c>
 8003d34:	b1b0      	cbz	r0, 8003d64 <_svfiprintf_r+0x114>
 8003d36:	9207      	str	r2, [sp, #28]
 8003d38:	e014      	b.n	8003d64 <_svfiprintf_r+0x114>
 8003d3a:	eba0 0308 	sub.w	r3, r0, r8
 8003d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	46a2      	mov	sl, r4
 8003d48:	e7d2      	b.n	8003cf0 <_svfiprintf_r+0xa0>
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	1d19      	adds	r1, r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9103      	str	r1, [sp, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfbb      	ittet	lt
 8003d56:	425b      	neglt	r3, r3
 8003d58:	f042 0202 	orrlt.w	r2, r2, #2
 8003d5c:	9307      	strge	r3, [sp, #28]
 8003d5e:	9307      	strlt	r3, [sp, #28]
 8003d60:	bfb8      	it	lt
 8003d62:	9204      	strlt	r2, [sp, #16]
 8003d64:	7823      	ldrb	r3, [r4, #0]
 8003d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d68:	d10a      	bne.n	8003d80 <_svfiprintf_r+0x130>
 8003d6a:	7863      	ldrb	r3, [r4, #1]
 8003d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d6e:	d132      	bne.n	8003dd6 <_svfiprintf_r+0x186>
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	9203      	str	r2, [sp, #12]
 8003d78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d7c:	3402      	adds	r4, #2
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e44 <_svfiprintf_r+0x1f4>
 8003d84:	7821      	ldrb	r1, [r4, #0]
 8003d86:	2203      	movs	r2, #3
 8003d88:	4650      	mov	r0, sl
 8003d8a:	f7fc fa61 	bl	8000250 <memchr>
 8003d8e:	b138      	cbz	r0, 8003da0 <_svfiprintf_r+0x150>
 8003d90:	9b04      	ldr	r3, [sp, #16]
 8003d92:	eba0 000a 	sub.w	r0, r0, sl
 8003d96:	2240      	movs	r2, #64	@ 0x40
 8003d98:	4082      	lsls	r2, r0
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	3401      	adds	r4, #1
 8003d9e:	9304      	str	r3, [sp, #16]
 8003da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da4:	4824      	ldr	r0, [pc, #144]	@ (8003e38 <_svfiprintf_r+0x1e8>)
 8003da6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003daa:	2206      	movs	r2, #6
 8003dac:	f7fc fa50 	bl	8000250 <memchr>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d036      	beq.n	8003e22 <_svfiprintf_r+0x1d2>
 8003db4:	4b21      	ldr	r3, [pc, #132]	@ (8003e3c <_svfiprintf_r+0x1ec>)
 8003db6:	bb1b      	cbnz	r3, 8003e00 <_svfiprintf_r+0x1b0>
 8003db8:	9b03      	ldr	r3, [sp, #12]
 8003dba:	3307      	adds	r3, #7
 8003dbc:	f023 0307 	bic.w	r3, r3, #7
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dc6:	4433      	add	r3, r6
 8003dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dca:	e76a      	b.n	8003ca2 <_svfiprintf_r+0x52>
 8003dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	e7a8      	b.n	8003d28 <_svfiprintf_r+0xd8>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	3401      	adds	r4, #1
 8003dda:	9305      	str	r3, [sp, #20]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f04f 0c0a 	mov.w	ip, #10
 8003de2:	4620      	mov	r0, r4
 8003de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003de8:	3a30      	subs	r2, #48	@ 0x30
 8003dea:	2a09      	cmp	r2, #9
 8003dec:	d903      	bls.n	8003df6 <_svfiprintf_r+0x1a6>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0c6      	beq.n	8003d80 <_svfiprintf_r+0x130>
 8003df2:	9105      	str	r1, [sp, #20]
 8003df4:	e7c4      	b.n	8003d80 <_svfiprintf_r+0x130>
 8003df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e7f0      	b.n	8003de2 <_svfiprintf_r+0x192>
 8003e00:	ab03      	add	r3, sp, #12
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	462a      	mov	r2, r5
 8003e06:	4b0e      	ldr	r3, [pc, #56]	@ (8003e40 <_svfiprintf_r+0x1f0>)
 8003e08:	a904      	add	r1, sp, #16
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f3af 8000 	nop.w
 8003e10:	1c42      	adds	r2, r0, #1
 8003e12:	4606      	mov	r6, r0
 8003e14:	d1d6      	bne.n	8003dc4 <_svfiprintf_r+0x174>
 8003e16:	89ab      	ldrh	r3, [r5, #12]
 8003e18:	065b      	lsls	r3, r3, #25
 8003e1a:	f53f af2d 	bmi.w	8003c78 <_svfiprintf_r+0x28>
 8003e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e20:	e72c      	b.n	8003c7c <_svfiprintf_r+0x2c>
 8003e22:	ab03      	add	r3, sp, #12
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	462a      	mov	r2, r5
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <_svfiprintf_r+0x1f0>)
 8003e2a:	a904      	add	r1, sp, #16
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f000 f879 	bl	8003f24 <_printf_i>
 8003e32:	e7ed      	b.n	8003e10 <_svfiprintf_r+0x1c0>
 8003e34:	08004470 	.word	0x08004470
 8003e38:	0800447a 	.word	0x0800447a
 8003e3c:	00000000 	.word	0x00000000
 8003e40:	08003b99 	.word	0x08003b99
 8003e44:	08004476 	.word	0x08004476

08003e48 <_printf_common>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	4698      	mov	r8, r3
 8003e50:	688a      	ldr	r2, [r1, #8]
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bfb8      	it	lt
 8003e5c:	4613      	movlt	r3, r2
 8003e5e:	6033      	str	r3, [r6, #0]
 8003e60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e64:	4607      	mov	r7, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	b10a      	cbz	r2, 8003e6e <_printf_common+0x26>
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	6033      	str	r3, [r6, #0]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	0699      	lsls	r1, r3, #26
 8003e72:	bf42      	ittt	mi
 8003e74:	6833      	ldrmi	r3, [r6, #0]
 8003e76:	3302      	addmi	r3, #2
 8003e78:	6033      	strmi	r3, [r6, #0]
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	f015 0506 	ands.w	r5, r5, #6
 8003e80:	d106      	bne.n	8003e90 <_printf_common+0x48>
 8003e82:	f104 0a19 	add.w	sl, r4, #25
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	6832      	ldr	r2, [r6, #0]
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	dc26      	bgt.n	8003ede <_printf_common+0x96>
 8003e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e94:	6822      	ldr	r2, [r4, #0]
 8003e96:	3b00      	subs	r3, #0
 8003e98:	bf18      	it	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	0692      	lsls	r2, r2, #26
 8003e9e:	d42b      	bmi.n	8003ef8 <_printf_common+0xb0>
 8003ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	47c8      	blx	r9
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d01e      	beq.n	8003eec <_printf_common+0xa4>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	6922      	ldr	r2, [r4, #16]
 8003eb2:	f003 0306 	and.w	r3, r3, #6
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf02      	ittt	eq
 8003eba:	68e5      	ldreq	r5, [r4, #12]
 8003ebc:	6833      	ldreq	r3, [r6, #0]
 8003ebe:	1aed      	subeq	r5, r5, r3
 8003ec0:	68a3      	ldr	r3, [r4, #8]
 8003ec2:	bf0c      	ite	eq
 8003ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec8:	2500      	movne	r5, #0
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	bfc4      	itt	gt
 8003ece:	1a9b      	subgt	r3, r3, r2
 8003ed0:	18ed      	addgt	r5, r5, r3
 8003ed2:	2600      	movs	r6, #0
 8003ed4:	341a      	adds	r4, #26
 8003ed6:	42b5      	cmp	r5, r6
 8003ed8:	d11a      	bne.n	8003f10 <_printf_common+0xc8>
 8003eda:	2000      	movs	r0, #0
 8003edc:	e008      	b.n	8003ef0 <_printf_common+0xa8>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	47c8      	blx	r9
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d103      	bne.n	8003ef4 <_printf_common+0xac>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef4:	3501      	adds	r5, #1
 8003ef6:	e7c6      	b.n	8003e86 <_printf_common+0x3e>
 8003ef8:	18e1      	adds	r1, r4, r3
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	2030      	movs	r0, #48	@ 0x30
 8003efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f02:	4422      	add	r2, r4
 8003f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	e7c7      	b.n	8003ea0 <_printf_common+0x58>
 8003f10:	2301      	movs	r3, #1
 8003f12:	4622      	mov	r2, r4
 8003f14:	4641      	mov	r1, r8
 8003f16:	4638      	mov	r0, r7
 8003f18:	47c8      	blx	r9
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d0e6      	beq.n	8003eec <_printf_common+0xa4>
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7d9      	b.n	8003ed6 <_printf_common+0x8e>
	...

08003f24 <_printf_i>:
 8003f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	7e0f      	ldrb	r7, [r1, #24]
 8003f2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f2c:	2f78      	cmp	r7, #120	@ 0x78
 8003f2e:	4691      	mov	r9, r2
 8003f30:	4680      	mov	r8, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	469a      	mov	sl, r3
 8003f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f3a:	d807      	bhi.n	8003f4c <_printf_i+0x28>
 8003f3c:	2f62      	cmp	r7, #98	@ 0x62
 8003f3e:	d80a      	bhi.n	8003f56 <_printf_i+0x32>
 8003f40:	2f00      	cmp	r7, #0
 8003f42:	f000 80d2 	beq.w	80040ea <_printf_i+0x1c6>
 8003f46:	2f58      	cmp	r7, #88	@ 0x58
 8003f48:	f000 80b9 	beq.w	80040be <_printf_i+0x19a>
 8003f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f54:	e03a      	b.n	8003fcc <_printf_i+0xa8>
 8003f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f5a:	2b15      	cmp	r3, #21
 8003f5c:	d8f6      	bhi.n	8003f4c <_printf_i+0x28>
 8003f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f64 <_printf_i+0x40>)
 8003f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f64:	08003fbd 	.word	0x08003fbd
 8003f68:	08003fd1 	.word	0x08003fd1
 8003f6c:	08003f4d 	.word	0x08003f4d
 8003f70:	08003f4d 	.word	0x08003f4d
 8003f74:	08003f4d 	.word	0x08003f4d
 8003f78:	08003f4d 	.word	0x08003f4d
 8003f7c:	08003fd1 	.word	0x08003fd1
 8003f80:	08003f4d 	.word	0x08003f4d
 8003f84:	08003f4d 	.word	0x08003f4d
 8003f88:	08003f4d 	.word	0x08003f4d
 8003f8c:	08003f4d 	.word	0x08003f4d
 8003f90:	080040d1 	.word	0x080040d1
 8003f94:	08003ffb 	.word	0x08003ffb
 8003f98:	0800408b 	.word	0x0800408b
 8003f9c:	08003f4d 	.word	0x08003f4d
 8003fa0:	08003f4d 	.word	0x08003f4d
 8003fa4:	080040f3 	.word	0x080040f3
 8003fa8:	08003f4d 	.word	0x08003f4d
 8003fac:	08003ffb 	.word	0x08003ffb
 8003fb0:	08003f4d 	.word	0x08003f4d
 8003fb4:	08003f4d 	.word	0x08003f4d
 8003fb8:	08004093 	.word	0x08004093
 8003fbc:	6833      	ldr	r3, [r6, #0]
 8003fbe:	1d1a      	adds	r2, r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6032      	str	r2, [r6, #0]
 8003fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e09d      	b.n	800410c <_printf_i+0x1e8>
 8003fd0:	6833      	ldr	r3, [r6, #0]
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	1d19      	adds	r1, r3, #4
 8003fd6:	6031      	str	r1, [r6, #0]
 8003fd8:	0606      	lsls	r6, r0, #24
 8003fda:	d501      	bpl.n	8003fe0 <_printf_i+0xbc>
 8003fdc:	681d      	ldr	r5, [r3, #0]
 8003fde:	e003      	b.n	8003fe8 <_printf_i+0xc4>
 8003fe0:	0645      	lsls	r5, r0, #25
 8003fe2:	d5fb      	bpl.n	8003fdc <_printf_i+0xb8>
 8003fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	da03      	bge.n	8003ff4 <_printf_i+0xd0>
 8003fec:	232d      	movs	r3, #45	@ 0x2d
 8003fee:	426d      	negs	r5, r5
 8003ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ff4:	4859      	ldr	r0, [pc, #356]	@ (800415c <_printf_i+0x238>)
 8003ff6:	230a      	movs	r3, #10
 8003ff8:	e011      	b.n	800401e <_printf_i+0xfa>
 8003ffa:	6821      	ldr	r1, [r4, #0]
 8003ffc:	6833      	ldr	r3, [r6, #0]
 8003ffe:	0608      	lsls	r0, r1, #24
 8004000:	f853 5b04 	ldr.w	r5, [r3], #4
 8004004:	d402      	bmi.n	800400c <_printf_i+0xe8>
 8004006:	0649      	lsls	r1, r1, #25
 8004008:	bf48      	it	mi
 800400a:	b2ad      	uxthmi	r5, r5
 800400c:	2f6f      	cmp	r7, #111	@ 0x6f
 800400e:	4853      	ldr	r0, [pc, #332]	@ (800415c <_printf_i+0x238>)
 8004010:	6033      	str	r3, [r6, #0]
 8004012:	bf14      	ite	ne
 8004014:	230a      	movne	r3, #10
 8004016:	2308      	moveq	r3, #8
 8004018:	2100      	movs	r1, #0
 800401a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800401e:	6866      	ldr	r6, [r4, #4]
 8004020:	60a6      	str	r6, [r4, #8]
 8004022:	2e00      	cmp	r6, #0
 8004024:	bfa2      	ittt	ge
 8004026:	6821      	ldrge	r1, [r4, #0]
 8004028:	f021 0104 	bicge.w	r1, r1, #4
 800402c:	6021      	strge	r1, [r4, #0]
 800402e:	b90d      	cbnz	r5, 8004034 <_printf_i+0x110>
 8004030:	2e00      	cmp	r6, #0
 8004032:	d04b      	beq.n	80040cc <_printf_i+0x1a8>
 8004034:	4616      	mov	r6, r2
 8004036:	fbb5 f1f3 	udiv	r1, r5, r3
 800403a:	fb03 5711 	mls	r7, r3, r1, r5
 800403e:	5dc7      	ldrb	r7, [r0, r7]
 8004040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004044:	462f      	mov	r7, r5
 8004046:	42bb      	cmp	r3, r7
 8004048:	460d      	mov	r5, r1
 800404a:	d9f4      	bls.n	8004036 <_printf_i+0x112>
 800404c:	2b08      	cmp	r3, #8
 800404e:	d10b      	bne.n	8004068 <_printf_i+0x144>
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	07df      	lsls	r7, r3, #31
 8004054:	d508      	bpl.n	8004068 <_printf_i+0x144>
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	6861      	ldr	r1, [r4, #4]
 800405a:	4299      	cmp	r1, r3
 800405c:	bfde      	ittt	le
 800405e:	2330      	movle	r3, #48	@ 0x30
 8004060:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004064:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004068:	1b92      	subs	r2, r2, r6
 800406a:	6122      	str	r2, [r4, #16]
 800406c:	f8cd a000 	str.w	sl, [sp]
 8004070:	464b      	mov	r3, r9
 8004072:	aa03      	add	r2, sp, #12
 8004074:	4621      	mov	r1, r4
 8004076:	4640      	mov	r0, r8
 8004078:	f7ff fee6 	bl	8003e48 <_printf_common>
 800407c:	3001      	adds	r0, #1
 800407e:	d14a      	bne.n	8004116 <_printf_i+0x1f2>
 8004080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004084:	b004      	add	sp, #16
 8004086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	f043 0320 	orr.w	r3, r3, #32
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	4833      	ldr	r0, [pc, #204]	@ (8004160 <_printf_i+0x23c>)
 8004094:	2778      	movs	r7, #120	@ 0x78
 8004096:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	6831      	ldr	r1, [r6, #0]
 800409e:	061f      	lsls	r7, r3, #24
 80040a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80040a4:	d402      	bmi.n	80040ac <_printf_i+0x188>
 80040a6:	065f      	lsls	r7, r3, #25
 80040a8:	bf48      	it	mi
 80040aa:	b2ad      	uxthmi	r5, r5
 80040ac:	6031      	str	r1, [r6, #0]
 80040ae:	07d9      	lsls	r1, r3, #31
 80040b0:	bf44      	itt	mi
 80040b2:	f043 0320 	orrmi.w	r3, r3, #32
 80040b6:	6023      	strmi	r3, [r4, #0]
 80040b8:	b11d      	cbz	r5, 80040c2 <_printf_i+0x19e>
 80040ba:	2310      	movs	r3, #16
 80040bc:	e7ac      	b.n	8004018 <_printf_i+0xf4>
 80040be:	4827      	ldr	r0, [pc, #156]	@ (800415c <_printf_i+0x238>)
 80040c0:	e7e9      	b.n	8004096 <_printf_i+0x172>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	f023 0320 	bic.w	r3, r3, #32
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	e7f6      	b.n	80040ba <_printf_i+0x196>
 80040cc:	4616      	mov	r6, r2
 80040ce:	e7bd      	b.n	800404c <_printf_i+0x128>
 80040d0:	6833      	ldr	r3, [r6, #0]
 80040d2:	6825      	ldr	r5, [r4, #0]
 80040d4:	6961      	ldr	r1, [r4, #20]
 80040d6:	1d18      	adds	r0, r3, #4
 80040d8:	6030      	str	r0, [r6, #0]
 80040da:	062e      	lsls	r6, r5, #24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	d501      	bpl.n	80040e4 <_printf_i+0x1c0>
 80040e0:	6019      	str	r1, [r3, #0]
 80040e2:	e002      	b.n	80040ea <_printf_i+0x1c6>
 80040e4:	0668      	lsls	r0, r5, #25
 80040e6:	d5fb      	bpl.n	80040e0 <_printf_i+0x1bc>
 80040e8:	8019      	strh	r1, [r3, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	6123      	str	r3, [r4, #16]
 80040ee:	4616      	mov	r6, r2
 80040f0:	e7bc      	b.n	800406c <_printf_i+0x148>
 80040f2:	6833      	ldr	r3, [r6, #0]
 80040f4:	1d1a      	adds	r2, r3, #4
 80040f6:	6032      	str	r2, [r6, #0]
 80040f8:	681e      	ldr	r6, [r3, #0]
 80040fa:	6862      	ldr	r2, [r4, #4]
 80040fc:	2100      	movs	r1, #0
 80040fe:	4630      	mov	r0, r6
 8004100:	f7fc f8a6 	bl	8000250 <memchr>
 8004104:	b108      	cbz	r0, 800410a <_printf_i+0x1e6>
 8004106:	1b80      	subs	r0, r0, r6
 8004108:	6060      	str	r0, [r4, #4]
 800410a:	6863      	ldr	r3, [r4, #4]
 800410c:	6123      	str	r3, [r4, #16]
 800410e:	2300      	movs	r3, #0
 8004110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004114:	e7aa      	b.n	800406c <_printf_i+0x148>
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	4632      	mov	r2, r6
 800411a:	4649      	mov	r1, r9
 800411c:	4640      	mov	r0, r8
 800411e:	47d0      	blx	sl
 8004120:	3001      	adds	r0, #1
 8004122:	d0ad      	beq.n	8004080 <_printf_i+0x15c>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	079b      	lsls	r3, r3, #30
 8004128:	d413      	bmi.n	8004152 <_printf_i+0x22e>
 800412a:	68e0      	ldr	r0, [r4, #12]
 800412c:	9b03      	ldr	r3, [sp, #12]
 800412e:	4298      	cmp	r0, r3
 8004130:	bfb8      	it	lt
 8004132:	4618      	movlt	r0, r3
 8004134:	e7a6      	b.n	8004084 <_printf_i+0x160>
 8004136:	2301      	movs	r3, #1
 8004138:	4632      	mov	r2, r6
 800413a:	4649      	mov	r1, r9
 800413c:	4640      	mov	r0, r8
 800413e:	47d0      	blx	sl
 8004140:	3001      	adds	r0, #1
 8004142:	d09d      	beq.n	8004080 <_printf_i+0x15c>
 8004144:	3501      	adds	r5, #1
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	9903      	ldr	r1, [sp, #12]
 800414a:	1a5b      	subs	r3, r3, r1
 800414c:	42ab      	cmp	r3, r5
 800414e:	dcf2      	bgt.n	8004136 <_printf_i+0x212>
 8004150:	e7eb      	b.n	800412a <_printf_i+0x206>
 8004152:	2500      	movs	r5, #0
 8004154:	f104 0619 	add.w	r6, r4, #25
 8004158:	e7f5      	b.n	8004146 <_printf_i+0x222>
 800415a:	bf00      	nop
 800415c:	08004481 	.word	0x08004481
 8004160:	08004492 	.word	0x08004492

08004164 <memmove>:
 8004164:	4288      	cmp	r0, r1
 8004166:	b510      	push	{r4, lr}
 8004168:	eb01 0402 	add.w	r4, r1, r2
 800416c:	d902      	bls.n	8004174 <memmove+0x10>
 800416e:	4284      	cmp	r4, r0
 8004170:	4623      	mov	r3, r4
 8004172:	d807      	bhi.n	8004184 <memmove+0x20>
 8004174:	1e43      	subs	r3, r0, #1
 8004176:	42a1      	cmp	r1, r4
 8004178:	d008      	beq.n	800418c <memmove+0x28>
 800417a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800417e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004182:	e7f8      	b.n	8004176 <memmove+0x12>
 8004184:	4402      	add	r2, r0
 8004186:	4601      	mov	r1, r0
 8004188:	428a      	cmp	r2, r1
 800418a:	d100      	bne.n	800418e <memmove+0x2a>
 800418c:	bd10      	pop	{r4, pc}
 800418e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004196:	e7f7      	b.n	8004188 <memmove+0x24>

08004198 <_sbrk_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4d06      	ldr	r5, [pc, #24]	@ (80041b4 <_sbrk_r+0x1c>)
 800419c:	2300      	movs	r3, #0
 800419e:	4604      	mov	r4, r0
 80041a0:	4608      	mov	r0, r1
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	f000 f84c 	bl	8004240 <_sbrk>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d102      	bne.n	80041b2 <_sbrk_r+0x1a>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	b103      	cbz	r3, 80041b2 <_sbrk_r+0x1a>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	2000041c 	.word	0x2000041c

080041b8 <memcpy>:
 80041b8:	440a      	add	r2, r1
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80041c0:	d100      	bne.n	80041c4 <memcpy+0xc>
 80041c2:	4770      	bx	lr
 80041c4:	b510      	push	{r4, lr}
 80041c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ce:	4291      	cmp	r1, r2
 80041d0:	d1f9      	bne.n	80041c6 <memcpy+0xe>
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <_realloc_r>:
 80041d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d8:	4680      	mov	r8, r0
 80041da:	4615      	mov	r5, r2
 80041dc:	460c      	mov	r4, r1
 80041de:	b921      	cbnz	r1, 80041ea <_realloc_r+0x16>
 80041e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041e4:	4611      	mov	r1, r2
 80041e6:	f7ff bc4b 	b.w	8003a80 <_malloc_r>
 80041ea:	b92a      	cbnz	r2, 80041f8 <_realloc_r+0x24>
 80041ec:	f7ff fbdc 	bl	80039a8 <_free_r>
 80041f0:	2400      	movs	r4, #0
 80041f2:	4620      	mov	r0, r4
 80041f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f8:	f000 f81a 	bl	8004230 <_malloc_usable_size_r>
 80041fc:	4285      	cmp	r5, r0
 80041fe:	4606      	mov	r6, r0
 8004200:	d802      	bhi.n	8004208 <_realloc_r+0x34>
 8004202:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004206:	d8f4      	bhi.n	80041f2 <_realloc_r+0x1e>
 8004208:	4629      	mov	r1, r5
 800420a:	4640      	mov	r0, r8
 800420c:	f7ff fc38 	bl	8003a80 <_malloc_r>
 8004210:	4607      	mov	r7, r0
 8004212:	2800      	cmp	r0, #0
 8004214:	d0ec      	beq.n	80041f0 <_realloc_r+0x1c>
 8004216:	42b5      	cmp	r5, r6
 8004218:	462a      	mov	r2, r5
 800421a:	4621      	mov	r1, r4
 800421c:	bf28      	it	cs
 800421e:	4632      	movcs	r2, r6
 8004220:	f7ff ffca 	bl	80041b8 <memcpy>
 8004224:	4621      	mov	r1, r4
 8004226:	4640      	mov	r0, r8
 8004228:	f7ff fbbe 	bl	80039a8 <_free_r>
 800422c:	463c      	mov	r4, r7
 800422e:	e7e0      	b.n	80041f2 <_realloc_r+0x1e>

08004230 <_malloc_usable_size_r>:
 8004230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004234:	1f18      	subs	r0, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	bfbc      	itt	lt
 800423a:	580b      	ldrlt	r3, [r1, r0]
 800423c:	18c0      	addlt	r0, r0, r3
 800423e:	4770      	bx	lr

08004240 <_sbrk>:
 8004240:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <_sbrk+0x14>)
 8004242:	6811      	ldr	r1, [r2, #0]
 8004244:	4603      	mov	r3, r0
 8004246:	b909      	cbnz	r1, 800424c <_sbrk+0xc>
 8004248:	4903      	ldr	r1, [pc, #12]	@ (8004258 <_sbrk+0x18>)
 800424a:	6011      	str	r1, [r2, #0]
 800424c:	6810      	ldr	r0, [r2, #0]
 800424e:	4403      	add	r3, r0
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4770      	bx	lr
 8004254:	2000042c 	.word	0x2000042c
 8004258:	20000430 	.word	0x20000430

0800425c <_init>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr

08004268 <_fini>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr
